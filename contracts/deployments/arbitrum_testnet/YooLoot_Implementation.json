{
  "address": "0x21d366ee3BbF67AB057c517380D37E54fFd9dfC0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILootXP",
          "name": "lootXP",
          "type": "address"
        },
        {
          "internalType": "address[3]",
          "name": "authorizedLoots",
          "type": "address[3]"
        },
        {
          "internalType": "contract ILoot",
          "name": "loot",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "winnerGetLoot",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "commit3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "reveal3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "winner3HPeriod",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "loot",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "winnerGetLoot",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "commit3HPeriod",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "reveal3HPeriod",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "winner3HPeriod",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newYooLoot",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorizedAsXPSource",
          "type": "bool"
        }
      ],
      "name": "Cloned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        }
      ],
      "name": "LootDeckCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[8]",
          "name": "deck",
          "type": "uint8[8]"
        }
      ],
      "name": "LootDeckRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "deckHash",
          "type": "bytes32"
        }
      ],
      "name": "LootDeckSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "xpGaimed",
          "type": "uint256"
        }
      ],
      "name": "LootWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerPastOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        }
      ],
      "name": "WinnerWithdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oldLootId",
          "type": "uint256"
        }
      ],
      "name": "cancelDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oldLootId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "deckHash",
          "type": "bytes32"
        }
      ],
      "name": "changeDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "claimVictoryERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lootToPick",
          "type": "uint256"
        }
      ],
      "name": "claimVictoryLoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILoot",
          "name": "loot",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "winnerGetLoot",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "commit3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "reveal3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "winner3HPeriod",
          "type": "uint8"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "deckHash",
          "type": "bytes32"
        }
      ],
      "name": "commitLootDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILoot",
          "name": "loot",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "winnerGetLoot",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "commit3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "reveal3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "winner3HPeriod",
          "type": "uint8"
        }
      ],
      "name": "freeFormClone",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILoot",
          "name": "loot",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "winnerGetLoot",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "commit3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "reveal3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "winner3HPeriod",
          "type": "uint8"
        }
      ],
      "name": "freeFormInit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        }
      ],
      "name": "getDeckHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        },
        {
          "internalType": "uint8[8]",
          "name": "deckWithStartIndex1",
          "type": "uint8[8]"
        },
        {
          "internalType": "bool",
          "name": "lootForEveryone",
          "type": "bool"
        }
      ],
      "name": "getDeckPower",
      "outputs": [
        {
          "internalType": "uint8[8]",
          "name": "deckPower",
          "type": "uint8[8]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract ILoot",
              "name": "loot",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "startTime",
              "type": "uint40"
            },
            {
              "internalType": "uint8",
              "name": "commit3HPeriod",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "reveal3HPeriod",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "winner3HPeriod",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "winnerGetLoot",
              "type": "bool"
            }
          ],
          "internalType": "struct YooLoot.Parameters",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "uint8[8]",
              "name": "deckPower",
              "type": "uint8[8]"
            }
          ],
          "internalType": "struct YooLoot.TokenData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "getTokenDataOfOwner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "uint8[8]",
              "name": "deckPower",
              "type": "uint8[8]"
            }
          ],
          "internalType": "struct YooLoot.TokenData[]",
          "name": "tokens",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        }
      ],
      "name": "individualScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILoot",
          "name": "loot",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "winnerGetLoot",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "commit3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "reveal3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "winner3HPeriod",
          "type": "uint8"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        },
        {
          "internalType": "uint8[8]",
          "name": "deckWithStartIndex1",
          "type": "uint8[8]"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "revealLootDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winner",
      "outputs": [
        {
          "internalType": "address",
          "name": "winnerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "winnerLootId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "winnerScore",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        }
      ],
      "name": "withdrawAndGetXP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x361813e927c5219cf49f787fd557838466008dfb0dbfbb8ca20b6741c57d6e1c",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0x21d366ee3BbF67AB057c517380D37E54fFd9dfC0",
    "transactionIndex": 0,
    "gasUsed": "131867242",
    "logsBloom": "0x
    "blockHash": "0x96228054d16dcaa013788fdc7d4ef4e34198fd9209a2d3e18620b53e283c7040",
    "transactionHash": "0x361813e927c5219cf49f787fd557838466008dfb0dbfbb8ca20b6741c57d6e1c",
    "logs": [],
    "blockNumber": 4290148,
    "cumulativeGasUsed": "103723062",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAD994DEDAaB665ce5aad2a333253E30708087149",
    [
      "0xcC0925082BfB1122534d1a7A33BD1DC990113a39",
      "0x0000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000"
    ],
    "0xcC0925082BfB1122534d1a7A33BD1DC990113a39",
    true,
    56,
    24,
    8
  ],
  "solcInputHash": "c0e8302e24d5a803ea8d98f04327760e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILootXP\",\"name\":\"lootXP\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"authorizedLoots\",\"type\":\"address[3]\"},{\"internalType\":\"contract ILoot\",\"name\":\"loot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"winnerGetLoot\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"commit3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reveal3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"winner3HPeriod\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loot\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"winnerGetLoot\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"commit3HPeriod\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"reveal3HPeriod\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"winner3HPeriod\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newYooLoot\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorizedAsXPSource\",\"type\":\"bool\"}],\"name\":\"Cloned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"}],\"name\":\"LootDeckCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[8]\",\"name\":\"deck\",\"type\":\"uint8[8]\"}],\"name\":\"LootDeckRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deckHash\",\"type\":\"bytes32\"}],\"name\":\"LootDeckSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xpGaimed\",\"type\":\"uint256\"}],\"name\":\"LootWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerPastOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"}],\"name\":\"WinnerWithdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldLootId\",\"type\":\"uint256\"}],\"name\":\"cancelDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldLootId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"deckHash\",\"type\":\"bytes32\"}],\"name\":\"changeDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimVictoryERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootToPick\",\"type\":\"uint256\"}],\"name\":\"claimVictoryLoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoot\",\"name\":\"loot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"winnerGetLoot\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"commit3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reveal3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"winner3HPeriod\",\"type\":\"uint8\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"deckHash\",\"type\":\"bytes32\"}],\"name\":\"commitLootDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoot\",\"name\":\"loot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"winnerGetLoot\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"commit3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reveal3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"winner3HPeriod\",\"type\":\"uint8\"}],\"name\":\"freeFormClone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoot\",\"name\":\"loot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"winnerGetLoot\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"commit3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reveal3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"winner3HPeriod\",\"type\":\"uint8\"}],\"name\":\"freeFormInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"}],\"name\":\"getDeckHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[8]\",\"name\":\"deckWithStartIndex1\",\"type\":\"uint8[8]\"},{\"internalType\":\"bool\",\"name\":\"lootForEveryone\",\"type\":\"bool\"}],\"name\":\"getDeckPower\",\"outputs\":[{\"internalType\":\"uint8[8]\",\"name\":\"deckPower\",\"type\":\"uint8[8]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParams\",\"outputs\":[{\"components\":[{\"internalType\":\"contract ILoot\",\"name\":\"loot\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"},{\"internalType\":\"uint8\",\"name\":\"commit3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reveal3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"winner3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"winnerGetLoot\",\"type\":\"bool\"}],\"internalType\":\"struct YooLoot.Parameters\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint8[8]\",\"name\":\"deckPower\",\"type\":\"uint8[8]\"}],\"internalType\":\"struct YooLoot.TokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"getTokenDataOfOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint8[8]\",\"name\":\"deckPower\",\"type\":\"uint8[8]\"}],\"internalType\":\"struct YooLoot.TokenData[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"}],\"name\":\"individualScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoot\",\"name\":\"loot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"winnerGetLoot\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"commit3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reveal3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"winner3HPeriod\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[8]\",\"name\":\"deckWithStartIndex1\",\"type\":\"uint8[8]\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"revealLootDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winnerLootId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerScore\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"}],\"name\":\"withdrawAndGetXP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTokenDataOfOwner(address,uint256,uint256)\":{\"notice\":\"get all info in the minimum calls\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/YooLoot.sol\":\"YooLoot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/YooLoot.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.7;\\n\\nimport \\\"./interfaces/ILoot.sol\\\";\\nimport \\\"./interfaces/ILootXP.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract YooLoot {\\n    event LootDeckSubmitted(address indexed player, uint256 indexed lootId, bytes32 deckHash);\\n    event LootDeckCanceled(address indexed player, uint256 indexed lootId);\\n\\n    event LootDeckRevealed(uint256 indexed lootId, uint8[8] deck);\\n\\n    event WinnerWithdrawal(address indexed winner, address indexed playerPastOwner, uint256 indexed lootId);\\n    event LootWithdrawn(address indexed player, uint256 indexed lootId, uint256 xpGaimed);\\n\\n\\n    event Cloned(address indexed loot, bool winnerGetLoot, uint8 commit3HPeriod, uint8 reveal3HPeriod, uint8 winner3HPeriod, address newYooLoot, bool authorizedAsXPSource);\\n\\n    struct Parameters {\\n        ILoot loot;\\n        uint40 startTime;\\n        uint8 commit3HPeriod;\\n        uint8 reveal3HPeriod;\\n        uint8 winner3HPeriod;\\n        bool winnerGetLoot;\\n    }\\n\\n    struct TokenData {\\n        uint256 id;\\n        string tokenURI;\\n        uint8[8] deckPower;\\n    }\\n\\n    Parameters private _paramaters;\\n\\n    mapping(uint256 => address) private _deposits;\\n    mapping(uint256 => bytes32) private _deckHashes;\\n    mapping(uint8 => mapping(uint8 => uint256)) private _rounds;\\n\\n    address private immutable _originalLoot;\\n    address private immutable _mloot;\\n    address private immutable _lootForEveryone;\\n\\n    ILootXP private immutable _lootXP;\\n\\n    constructor(\\n        ILootXP lootXP,\\n        address[3] memory authorizedLoots,\\n        ILoot loot,\\n        bool winnerGetLoot,\\n        uint8 commit3HPeriod,\\n        uint8 reveal3HPeriod,\\n        uint8 winner3HPeriod\\n    ) {\\n        _lootXP = lootXP;\\n        _originalLoot = authorizedLoots[0];\\n        _mloot = authorizedLoots[1];\\n        _lootForEveryone = authorizedLoots[2];\\n        _init(loot, winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod);\\n    }\\n\\n    function _init(\\n        ILoot loot,\\n        bool winnerGetLoot,\\n        uint8 commit3HPeriod,\\n        uint8 reveal3HPeriod,\\n        uint8 winner3HPeriod\\n    ) internal {\\n        require(_paramaters.startTime == 0, \\\"ALREADY_INITIALISED\\\");\\n        require(commit3HPeriod >= 2, \\\"COMMIT_PERIOD_TOO_SHORT\\\"); // 6 hours\\n        require(commit3HPeriod >= 8 ? reveal3HPeriod >= 8: reveal3HPeriod >= commit3HPeriod, \\\"REVEAL_PERIOD_TOO_SHORT\\\");\\n        require(reveal3HPeriod <= 24, \\\"REVEAL_PERIOD_TOO_LONG\\\"); // 3 days\\n        require(commit3HPeriod >= 8 ? winner3HPeriod >= 8: winner3HPeriod >= commit3HPeriod, \\\"WINNER_PERIOD_TOO_SHORT\\\");\\n        require(winner3HPeriod <= 24, \\\"WINNER_PERIOD_TOO_LONG\\\"); // 3 days\\n        _paramaters.loot = loot;\\n        _paramaters.winnerGetLoot = winnerGetLoot;\\n        _paramaters.startTime = uint40(block.timestamp);\\n        _paramaters.commit3HPeriod = commit3HPeriod;\\n        _paramaters.reveal3HPeriod = reveal3HPeriod;\\n        _paramaters.winner3HPeriod = winner3HPeriod;\\n    }\\n\\n    function freeFormInit(\\n        ILoot loot,\\n        bool winnerGetLoot,\\n        uint8 commit3HPeriod,\\n        uint8 reveal3HPeriod,\\n        uint8 winner3HPeriod\\n    ) public {\\n        _init(loot, winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod);\\n    }\\n\\n    function init(\\n        ILoot loot,\\n        bool winnerGetLoot,\\n        uint8 commit3HPeriod,\\n        uint8 reveal3HPeriod,\\n        uint8 winner3HPeriod\\n    ) public {\\n        require(address(loot) != address(0), \\\"INVALID_ZERO_LOOT\\\");\\n        require(address(loot) == _originalLoot || address(loot) == _mloot || address(loot) == _lootForEveryone, \\\"INVALID LOOT\\\");\\n        _init(loot, winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod);\\n    }\\n\\n    function clone(\\n        ILoot loot,\\n        bool winnerGetLoot,\\n        uint8 commit3HPeriod,\\n        uint8 reveal3HPeriod,\\n        uint8 winner3HPeriod\\n    ) external returns (address) {\\n        return _clone(loot, winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod, true);\\n    }\\n\\n    function freeFormClone(\\n        ILoot loot,\\n        bool winnerGetLoot,\\n        uint8 commit3HPeriod,\\n        uint8 reveal3HPeriod,\\n        uint8 winner3HPeriod\\n    ) external returns (address) {\\n        return _clone(loot, winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod, false);\\n    }\\n\\n    function _clone(\\n        ILoot loot,\\n        bool winnerGetLoot,\\n        uint8 commit3HPeriod,\\n        uint8 reveal3HPeriod,\\n        uint8 winner3HPeriod,\\n        bool generateXP\\n    ) internal returns(address) {\\n        address implementation;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            implementation := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\\n        }\\n        if (implementation == address(0)) {\\n            implementation = address(this);\\n        }\\n        address yooloot = Clones.clone(implementation);\\n        if (generateXP) {\\n            YooLoot(yooloot).init(loot, winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod);\\n            _lootXP.setSource(yooloot, true);\\n        } else {\\n            YooLoot(yooloot).freeFormInit(loot, winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod);\\n        }\\n        emit Cloned(address(loot), winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod, yooloot, generateXP);\\n        return yooloot;\\n    }\\n\\n    function commitLootDeck(uint256 lootId, bytes32 deckHash) external {\\n        require((block.timestamp - _paramaters.startTime) < (3 hours * uint256(_paramaters.commit3HPeriod)), \\\"COMMIT_PERIOD_OVER\\\");\\n        require(deckHash != 0x0000000000000000000000000000000000000000000000000000000000000001, \\\"INVALID HASH\\\");\\n        _deckHashes[lootId] = deckHash;\\n        _deposits[lootId] = msg.sender;\\n        _paramaters.loot.transferFrom(msg.sender, address(this), lootId);\\n        emit LootDeckSubmitted(msg.sender, lootId, deckHash);\\n    }\\n\\n    function changeDeck(uint256 oldLootId, uint256 lootId, bytes32 deckHash) external {\\n        require((block.timestamp - _paramaters.startTime) < (3 hours * uint256(_paramaters.commit3HPeriod)), \\\"COMMIT_PERIOD_OVER\\\");\\n        require(deckHash != 0x0000000000000000000000000000000000000000000000000000000000000001, \\\"INVALID HASH\\\");\\n        require(msg.sender == _deposits[oldLootId], \\\"NOT_YOUR_LOOT\\\");\\n        _deckHashes[lootId] = deckHash;\\n        if (oldLootId != lootId) {\\n            _deckHashes[oldLootId] = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n            _deposits[oldLootId] = address(0);\\n            _deposits[lootId] = msg.sender;\\n            _paramaters.loot.safeTransferFrom(address(this), msg.sender, oldLootId);\\n            _paramaters.loot.transferFrom(msg.sender, address(this), lootId);\\n        }\\n\\n        emit LootDeckCanceled(msg.sender, oldLootId);\\n        emit LootDeckSubmitted(msg.sender, lootId, deckHash);\\n    }\\n\\n    function cancelDeck(uint256 oldLootId) external {\\n        require((block.timestamp - _paramaters.startTime) < (3 hours * uint256(_paramaters.commit3HPeriod)), \\\"COMMIT_PERIOD_OVER\\\");\\n        require(msg.sender == _deposits[oldLootId], \\\"NOT_YOUR_LOOT\\\");\\n        _deckHashes[oldLootId] = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n        _deposits[oldLootId] = address(0);\\n        _paramaters.loot.safeTransferFrom(address(this), msg.sender, oldLootId);\\n        emit LootDeckCanceled(msg.sender, oldLootId);\\n    }\\n\\n    function revealLootDeck(\\n        uint256 lootId,\\n        uint8[8] calldata deckWithStartIndex1,\\n        bytes32 secret\\n    ) external {\\n        uint256 commitPeriod = (3 hours * uint256(_paramaters.commit3HPeriod));\\n        uint256 timePassed = block.timestamp - _paramaters.startTime;\\n\\n        require(timePassed > commitPeriod, \\\"REVEAL_PERIOD_NOT_STARTED\\\");\\n\\n        require(timePassed < commitPeriod + 3 hours * uint256(_paramaters.reveal3HPeriod), \\\"REVEAL_PERIOD_OVER\\\");\\n\\n        bytes32 deckHash = _deckHashes[lootId];\\n        require(deckHash != 0x0000000000000000000000000000000000000000000000000000000000000001, \\\"ALREADY_REVEALED\\\");\\n        require(keccak256(abi.encodePacked(secret, lootId, deckWithStartIndex1)) == deckHash, \\\"INVALID_SECRET'\\\");\\n        _deckHashes[lootId] = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n        uint8[8] memory indicesUsed;\\n        for (uint8 i = 0; i < 8; i++) {\\n            uint8 index = deckWithStartIndex1[i] - 1;\\n            indicesUsed[index]++;\\n            uint8 power = pluckPower(lootId, index, address(_paramaters.loot) == _lootForEveryone);\\n            uint256 current = _rounds[i][power];\\n            if (current == 0) {\\n                _rounds[i][power] = lootId;\\n            } else if (current != 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                _rounds[i][power] = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            }\\n        }\\n        for (uint8 i = 0; i < 8; i++) {\\n            require(indicesUsed[i] == 1, \\\"INVALID_DECK\\\");\\n        }\\n        emit LootDeckRevealed(lootId, deckWithStartIndex1);\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function winner()\\n        public\\n        view\\n        returns (\\n            address winnerAddress,\\n            uint256 winnerLootId,\\n            uint256 winnerScore\\n        )\\n    {\\n        require((block.timestamp - _paramaters.startTime) > (3 hours * (uint256(_paramaters.commit3HPeriod) + uint256(_paramaters.reveal3HPeriod))), \\\"REVEAL_PERIOD_NOT_OVER\\\");\\n\\n        uint256[8] memory winnerLootPerRound;\\n        for (uint8 round = 0; round < 8; round++) {\\n            for (uint8 power = 126; power > 0; power--) {\\n                uint256 lootId = _rounds[round][power - 1];\\n                if (lootId > 0 && lootId != 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                    winnerLootPerRound[round] = lootId;\\n                    winnerAddress = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (winnerAddress != 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF) { // nobody won a round;\\n            return (address(0), 0, 0);\\n        }\\n\\n        for (uint8 i = 0; i < 8; i++) {\\n            uint8 extra = 0;\\n            uint8 tmpScore;\\n            for (uint8 j = 0; j < 8; j++) {\\n                if (winnerLootPerRound[j] == 0) {\\n                    extra += (j + 1);\\n                } else if (winnerLootPerRound[j] == winnerLootPerRound[i]) {\\n                    tmpScore += extra + (j + 1);\\n                    extra = 0;\\n                }\\n            }\\n            if (tmpScore >= winnerScore) {\\n                // give more power to player who win later rounds\\n                winnerLootId = winnerLootPerRound[i];\\n                winnerScore = tmpScore;\\n            }\\n        }\\n        winnerAddress = _deposits[winnerLootId];\\n    }\\n\\n    function getDeckHash(uint256 lootId) external view returns(bytes32) {\\n        return _deckHashes[lootId];\\n    }\\n\\n    function getParams() external view returns (Parameters memory) {\\n        return _paramaters;\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function individualScore(uint256 lootId) public view returns (uint256 score) {\\n        require(\\n            lootId > 0 && lootId != 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\\n            \\\"INVALID_LOOT\\\"\\n        );\\n\\n        require((block.timestamp - _paramaters.startTime) > (3 hours * (uint256(_paramaters.commit3HPeriod) + uint256(_paramaters.reveal3HPeriod))), \\\"REVEAL_PERIOD_NOT_OVER\\\");\\n\\n        uint256 extra = 0;\\n        for (uint8 round = 0; round < 8; round++) {\\n            bool anyone = false;\\n            for (uint8 power = 126; power > 0; power--) {\\n                uint256 lootIdHere = _rounds[round][power - 1];\\n                if (lootIdHere == lootId) {\\n                    score += (round + 1) + extra;\\n                    anyone = true;\\n                    break;\\n                } else if (\\n                    lootIdHere > 0 && lootIdHere != 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                ) {\\n                    anyone = true;\\n                    break;\\n                }\\n            }\\n            if (!anyone) {\\n                extra += (round + 1);\\n            } else {\\n                extra = 0;\\n            }\\n        }\\n    }\\n\\n    ///@notice get all info in the minimum calls\\n    function getTokenDataOfOwner(\\n        address owner,\\n        uint256 start,\\n        uint256 num\\n    ) external view returns (TokenData[] memory tokens) {\\n        uint256 balance = _paramaters.loot.balanceOf(owner);\\n        require(balance >= start + num, \\\"TOO_MANY_TOKEN_REQUESTED\\\");\\n        tokens = new TokenData[](num);\\n        uint8[8] memory baseDeck = [1,2,3,4,5,6,7,8];\\n        uint256 i = 0;\\n        while (i < num) {\\n            uint256 id = _paramaters.loot.tokenOfOwnerByIndex(owner, start + i);\\n            tokens[i] = TokenData(id, _paramaters.loot.tokenURI(id), getDeckPower(id, baseDeck, address(_paramaters.loot) == _lootForEveryone));\\n            i++;\\n        }\\n    }\\n\\n    function getTokenData(\\n        uint256 id\\n    ) external view returns (TokenData memory) {\\n        uint8[8] memory baseDeck = [1,2,3,4,5,6,7,8];\\n        return TokenData(id, _paramaters.loot.tokenURI(id), getDeckPower(id, baseDeck, address(_paramaters.loot) == _lootForEveryone));\\n    }\\n\\n    function claimVictoryLoot(uint256 lootToPick) external {\\n        require(_paramaters.winnerGetLoot, \\\"NO_LOOT_TO_WIN\\\");\\n\\n        require((block.timestamp - _paramaters.startTime) < (3 hours * (uint256(_paramaters.commit3HPeriod) + uint256(_paramaters.reveal3HPeriod) + uint256(_paramaters.winner3HPeriod))), \\\"VICTORY_PERIOD_OVER\\\");\\n\\n        (address winnerAddress, , ) = winner();\\n        require(winnerAddress == msg.sender, \\\"NOT_WINNER\\\");\\n        address takenFrom = _deposits[lootToPick];\\n        require(takenFrom != msg.sender, \\\"ALREADY_OWNER\\\");\\n        _paramaters.loot.safeTransferFrom(address(this), msg.sender, lootToPick);\\n        _paramaters.startTime = 1;\\n\\n        emit WinnerWithdrawal(msg.sender, takenFrom, lootToPick);\\n    }\\n\\n    function claimVictoryERC20(IERC20 token) external {\\n        require(address(token) != address(_paramaters.loot), \\\"INVALID_ERC20\\\");\\n        (address winnerAddress, , ) = winner();\\n        require(winnerAddress == msg.sender, \\\"NOT_WINNER\\\");\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    function withdrawAndGetXP(uint256 lootId) external {\\n        (address winnerAddress, uint256 winnerLootId, uint256 winnerScore) = winner();\\n\\n        if (!((block.timestamp - _paramaters.startTime) > (3 hours * (uint256(_paramaters.commit3HPeriod) + uint256(_paramaters.reveal3HPeriod) + uint256(_paramaters.winner3HPeriod))))) {\\n            require(winnerAddress == address(0), \\\"VICTORY_PERIOD_NOT_OVER\\\");\\n        }\\n\\n        require(_deposits[lootId] == msg.sender, \\\"NOT_OWNER\\\");\\n        require(\\n            _deckHashes[lootId] == 0x0000000000000000000000000000000000000000000000000000000000000001,\\n            \\\"DID_NOT_REVEAL\\\"\\n        );\\n        _paramaters.loot.safeTransferFrom(address(this), msg.sender, lootId);\\n        uint256 xpGained;\\n        if (lootId == winnerLootId) {\\n            xpGained = 10000 * winnerScore;\\n        } else {\\n            uint256 score = individualScore(lootId);\\n            xpGained = 100 + 1000 * score;\\n        }\\n\\n        if (!_lootXP.addXP(lootId, xpGained)) {\\n            xpGained = 0;\\n        }\\n\\n        emit LootWithdrawn(msg.sender, lootId, xpGained);\\n    }\\n\\n    function getDeckPower(uint256 lootId, uint8[8] memory deckWithStartIndex1, bool lootForEveryone) public pure returns (uint8[8] memory deckPower) {\\n        for (uint8 i = 0; i < 8; i++) {\\n            deckPower[i] = pluckPower(lootId, deckWithStartIndex1[i] - 1, lootForEveryone);\\n        }\\n    }\\n\\n    // -----------------------------------------------------------\\n\\n    function pluckPower(uint256 lootId, uint256 gearType, bool lootForEveryone) internal pure returns (uint8 power) {\\n        (uint256 index, uint256 greatness) = pluck(lootId, gearType, lootForEveryone);\\n        if (greatness <= 14) {\\n            greatness = 3;\\n        } else if (greatness == 19) {\\n            greatness = 1;\\n        } else if (greatness == 20) {\\n            greatness = 0;\\n        } else {\\n            greatness = 2;\\n        }\\n        if (gearType == 0) {\\n            return uint8(125 - index);\\n        } else if (gearType < 6) {\\n            return uint8(125 - (18 + (gearType - 1) * 15 + index));\\n        } else if (gearType == 6) {\\n            return uint8(125 - (18 + 5 * 15 + index * 4 + greatness));\\n        } else {\\n            return uint8(125 - (18 + 5 * 15 + 3 * 4 + index * 4 + greatness));\\n        }\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function pluck(uint256 tokenId, uint256 gearType, bool lootForEveryone) internal pure returns (uint256 index, uint256 greatness) {\\n        string memory keyPrefix = \\\"WEAPON\\\";\\n        uint256 length = 18;\\n        if (gearType == 1) {\\n            keyPrefix = \\\"CHEST\\\";\\n            length = 15;\\n        } else if (gearType == 2) {\\n            keyPrefix = \\\"HEAD\\\";\\n            length = 15;\\n        } else if (gearType == 3) {\\n            keyPrefix = \\\"WAIST\\\";\\n            length = 15;\\n        } else if (gearType == 4) {\\n            keyPrefix = \\\"FOOT\\\";\\n            length = 15;\\n        } else if (gearType == 5) {\\n            keyPrefix = \\\"HAND\\\";\\n            length = 15;\\n        } else if (gearType == 6) {\\n            keyPrefix = \\\"NECK\\\";\\n            length = 3;\\n        } else if (gearType == 7) {\\n            keyPrefix = \\\"RING\\\";\\n            length = 5;\\n        }\\n\\n        // TODO test if necessary\\n        uint256 rand;\\n        if (!lootForEveryone || tokenId < 8001) {\\n            rand = random(string(abi.encodePacked(keyPrefix, toString(tokenId))));\\n        } else {\\n            rand = random(string(abi.encodePacked(keyPrefix, abi.encodePacked(address(uint160(tokenId))))));\\n        }\\n\\n        index = rand % length;\\n        greatness = rand % 21;\\n    }\\n\\n    // TODO test\\n    // solhint-disable-next-line code-complexity\\n    function pluckGreatness(uint256 tokenId, uint256 gearType) internal pure returns (uint8) {\\n        string memory keyPrefix = \\\"WEAPON\\\";\\n        if (gearType == 1) {\\n            keyPrefix = \\\"CHEST\\\";\\n        } else if (gearType == 2) {\\n            keyPrefix = \\\"HEAD\\\";\\n        } else if (gearType == 3) {\\n            keyPrefix = \\\"WAIST\\\";\\n        } else if (gearType == 4) {\\n            keyPrefix = \\\"FOOT\\\";\\n        } else if (gearType == 5) {\\n            keyPrefix = \\\"HAND\\\";\\n        } else if (gearType == 6) {\\n            keyPrefix = \\\"NECK\\\";\\n        } else if (gearType == 7) {\\n            keyPrefix = \\\"RING\\\";\\n        }\\n        uint256 rand;\\n        if (tokenId < 8001) {\\n            rand = random(string(abi.encodePacked(keyPrefix, toString(tokenId))));\\n        } else {\\n            rand = random(string(abi.encodePacked(keyPrefix, abi.encodePacked(address(uint160(tokenId))))));\\n        }\\n\\n        uint8 greatness = uint8(rand % 21);\\n        return greatness;\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT license\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function random(string memory input) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(input)));\\n    }\\n}\\n\",\"keccak256\":\"0xa77d7feb9c02711aad6d055f40156c7ed40e9121ec500ab5d68468a44a05a202\",\"license\":\"AGPL-1.0\"},\"src/interfaces/ILoot.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface ILoot is IERC721Metadata, IERC721Enumerable {\\n\\n}\\n\",\"keccak256\":\"0x30abbcb072684ed7f8a5787dec21c7389bde64f042c79577b28854d58260138b\",\"license\":\"Unlicense\"},\"src/interfaces/ILootXP.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.7;\\n\\ninterface ILootXP{\\n    function xp(uint256 lootId) external returns (uint256);\\n\\n    function xpSource(address source) external returns (bool);\\n\\n    function xpSink(address sink) external returns (bool);\\n\\n    function generator(address generator) external returns (bool);\\n\\n    function addXP(uint256 lootId, uint256 amount) external returns (bool);\\n\\n    function removeXP(uint256 lootId, uint256 amount) external returns (bool);\\n\\n    function setSource(address source, bool add) external;\\n\\n    function setSink(address sink, bool add) external;\\n\\n    function setGenerator(address generator, bool add) external;\\n}\\n\",\"keccak256\":\"0x55bb48c4b0cb3ea19fa7c88e886e00434e7cdf89bd624903c10668b7ced5711b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200458838038062004588833981016040819052620000359162000399565b6001600160601b0319606088811b821660e0528751811b82166080526020880151811b821660a0526040880151901b1660c05262000077858585858562000084565b50505050505050620004d2565b600054600160a01b900464ffffffffff1615620000e85760405162461bcd60e51b815260206004820152601360248201527f414c52454144595f494e495449414c495345440000000000000000000000000060448201526064015b60405180910390fd5b60028360ff1610156200013e5760405162461bcd60e51b815260206004820152601760248201527f434f4d4d49545f504552494f445f544f4f5f53484f52540000000000000000006044820152606401620000df565b60088360ff1610156200015b578260ff168260ff16101562000164565b60088260ff1610155b620001b25760405162461bcd60e51b815260206004820152601760248201527f52455645414c5f504552494f445f544f4f5f53484f52540000000000000000006044820152606401620000df565b60188260ff161115620002085760405162461bcd60e51b815260206004820152601660248201527f52455645414c5f504552494f445f544f4f5f4c4f4e47000000000000000000006044820152606401620000df565b60088360ff16101562000225578260ff168160ff1610156200022e565b60088160ff1610155b6200027c5760405162461bcd60e51b815260206004820152601760248201527f57494e4e45525f504552494f445f544f4f5f53484f52540000000000000000006044820152606401620000df565b60188160ff161115620002d25760405162461bcd60e51b815260206004820152601660248201527f57494e4e45525f504552494f445f544f4f5f4c4f4e47000000000000000000006044820152606401620000df565b600080546001600160a01b03969096166001600160a01b0360ff60e01b011990961695909517600160e01b941515949094029390931765ffffffffffff60a01b1916600160a01b4264ffffffffff160260ff60c81b191617600160c81b60ff938416021761ffff60d01b1916600160d01b9183169190910260ff60d81b191617600160d81b9290911691909102179055565b80516200037181620004b9565b919050565b805180151581146200037157600080fd5b805160ff811681146200037157600080fd5b6000806000806000806000610120888a031215620003b657600080fd5b8751620003c381620004b9565b96506020603f89018a13620003d757600080fd5b604051606081016001600160401b0381118282101715620003fc57620003fc620004a3565b604052808a830160808c018d8111156200041557600080fd5b60005b600381101562000440576200042d8362000364565b8452928501929185019160010162000418565b50839a506200044f8162000364565b995050505050506200046460a0890162000376565b93506200047460c0890162000387565b92506200048460e0890162000387565b915062000495610100890162000387565b905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620004cf57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6140546200053460003960008181610e0601526130f0015260008181611252015281816113f901528181611a800152612265015260006113a30152600061134e01526140546000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638c5e14a4116100b2578063b09afec111610081578063d06a724411610066578063d06a72441461043e578063d378d09614610451578063dfbf53ae1461047157600080fd5b8063b09afec11461040b578063bbe0e56e1461042b57600080fd5b80638c5e14a41461038d5780638e76c692146103ad5780639b17ac66146103c05780639b4557e8146103d357600080fd5b8063506c0e86116101095780636c37648a116100ee5780636c37648a14610346578063745fb2d6146103675780637eee28df1461037a57600080fd5b8063506c0e861461019f5780635e615a6b146101b257600080fd5b80631b16b4d31461013b5780631c0dcf87146101505780631f89d097146101635780633a5110db14610176575b600080fd5b61014e610149366004613b2d565b6104ab565b005b61014e61015e3660046139f1565b61085e565b61014e6101713660046139f1565b610aad565b61018961018436600461384e565b610edd565b6040516101969190613cae565b60405180910390f35b61014e6101ad3660046138bd565b6112cf565b6102d26040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506040805160c08101825260005473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff74010000000000000000000000000000000000000000820416602083015260ff79010000000000000000000000000000000000000000000000000082048116938301939093527a0100000000000000000000000000000000000000000000000000008104831660608301527b010000000000000000000000000000000000000000000000000000008104831660808301527c01000000000000000000000000000000000000000000000000000000009004909116151560a082015290565b6040516101969190600060c08201905073ffffffffffffffffffffffffffffffffffffffff835116825264ffffffffff602084015116602083015260ff604084015116604083015260ff606084015116606083015260ff608084015116608083015260a0830151151560a083015292915050565b6103596103543660046139f1565b6114c1565b604051908152602001610196565b61014e610375366004613a23565b611764565b61014e6103883660046138a0565b611c78565b61035961039b3660046139f1565b60009081526002602052604090205490565b61014e6103bb3660046138bd565b6114ad565b61014e6103ce366004613b0b565b611eda565b6103e66103e13660046138bd565b612117565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610196565b61041e6104193660046139f1565b612132565b6040516101969190613d80565b61014e6104393660046139f1565b6122ad565b6103e661044c3660046138bd565b612684565b61046461045f366004613a61565b612695565b6040516101969190613d6b565b61047961271b565b6040805173ffffffffffffffffffffffffffffffffffffffff9094168452602084019290925290820152606001610196565b6000546104da90790100000000000000000000000000000000000000000000000000900460ff16612a30613de4565b6000546105069074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b10610572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f434f4d4d49545f504552494f445f4f564552000000000000000000000000000060448201526064015b60405180910390fd5b60018114156105dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c4944204841534800000000000000000000000000000000000000006044820152606401610569565b60008381526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16331461066a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e4f545f594f55525f4c4f4f54000000000000000000000000000000000000006044820152606401610569565b60008281526002602052604090208190558282146107f5576000838152600260209081526040808320839055600190915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116909155848352818320805433921682179055915490517f42842e0e00000000000000000000000000000000000000000000000000000000815230600482015260248101929092526044820185905273ffffffffffffffffffffffffffffffffffffffff16906342842e0e90606401600060405180830381600087803b15801561074c57600080fd5b505af1158015610760573d6000803e3d6000fd5b50506000546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810186905273ffffffffffffffffffffffffffffffffffffffff90911692506323b872dd9150606401600060405180830381600087803b1580156107dc57600080fd5b505af11580156107f0573d6000803e3d6000fd5b505050505b604051839033907ff1c7f9718b5514ae194b133997551a0ae0cd216fecedde802c4530bd52d3a59290600090a3604051818152829033907f192b0f1468348c5b80c08a20c51326bcee8ea98f2ed5e7b813b6b24e279255029060200160405180910390a3505050565b60005461088d90790100000000000000000000000000000000000000000000000000900460ff16612a30613de4565b6000546108b99074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b10610920576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f434f4d4d49545f504552494f445f4f56455200000000000000000000000000006044820152606401610569565b60008181526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1633146109ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e4f545f594f55525f4c4f4f54000000000000000000000000000000000000006044820152606401610569565b6000818152600260209081526040808320839055600190915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055905490517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b158015610a6557600080fd5b505af1158015610a79573d6000803e3d6000fd5b50506040518392503391507ff1c7f9718b5514ae194b133997551a0ae0cd216fecedde802c4530bd52d3a59290600090a350565b6000806000610aba61271b565b600054929550909350915060ff7b010000000000000000000000000000000000000000000000000000008204811691610b31917a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613d93565b610b3b9190613d93565b610b4790612a30613de4565b600054610b739074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b11610bf65773ffffffffffffffffffffffffffffffffffffffff831615610bf6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f564943544f52595f504552494f445f4e4f545f4f5645520000000000000000006044820152606401610569565b60008481526001602052604090205473ffffffffffffffffffffffffffffffffffffffff163314610c83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610569565b600084815260026020526040902054600114610cfb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4449445f4e4f545f52455645414c0000000000000000000000000000000000006044820152606401610569565b6000546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810186905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b158015610d7357600080fd5b505af1158015610d87573d6000803e3d6000fd5b50505050600082851415610da857610da182612710613de4565b9050610dd0565b6000610db3866114c1565b9050610dc1816103e8613de4565b610dcc906064613d93565b9150505b6040517f5146ea0e00000000000000000000000000000000000000000000000000000000815260048101869052602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635146ea0e90604401602060405180830381600087803b158015610e5f57600080fd5b505af1158015610e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e979190613883565b610e9f575060005b604051818152859033907f5892c6cb1d782a4f640c83141dd6dd939c114e55b9f5b700b15affb6d1fc7b849060200160405180910390a35050505050565b600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526060939216906370a082319060240160206040518083038186803b158015610f4b57600080fd5b505afa158015610f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f839190613a0a565b9050610f8f8385613d93565b811015610ff8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f544f4f5f4d414e595f544f4b454e5f52455155455354454400000000000000006044820152606401610569565b8267ffffffffffffffff81111561101157611011613fbc565b60405190808252806020026020018201604052801561104a57816020015b6110376137ed565b81526020019060019003908161102f5790505b50604080516101008101825260018152600260208201526003918101919091526004606082015260056080820152600660a0820152600760c0820152600860e082015290925060005b848110156112c5576000805473ffffffffffffffffffffffffffffffffffffffff16632f745c59896110c5858b613d93565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482015260440160206040518083038186803b15801561112e57600080fd5b505afa158015611142573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111669190613a0a565b6040805160608101825282815260005491517fc87b56dd0000000000000000000000000000000000000000000000000000000081526004810184905292935091602083019173ffffffffffffffffffffffffffffffffffffffff169063c87b56dd9060240160006040518083038186803b1580156111e357600080fd5b505afa1580156111f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261123d9190810190613926565b815260005460209091019061129190849087907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614612695565b8152508583815181106112a6576112a6613f8d565b602002602001018190525081806112bc90613ec2565b92505050611093565b5050509392505050565b73ffffffffffffffffffffffffffffffffffffffff851661134c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5a45524f5f4c4f4f540000000000000000000000000000006044820152606401610569565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806113f157507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b8061144757507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b6114ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c4944204c4f4f5400000000000000000000000000000000000000006044820152606401610569565b6114ba8585858585612a60565b5050505050565b600080821180156114f25750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b611558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f4c4f4f5400000000000000000000000000000000000000006044820152606401610569565b6000546115a59060ff7a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613d93565b6115b190612a30613de4565b6000546115dd9074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b11611644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f52455645414c5f504552494f445f4e4f545f4f564552000000000000000000006044820152606401610569565b6000805b60088160ff16101561175d576000607e5b60ff8116156117205760ff8316600090815260036020526040812081611680600185613e38565b60ff1660ff168152602001908152602001600020549050868114156116ce57846116ab856001613dab565b60ff166116b89190613d93565b6116c29087613d93565b95506001925050611720565b6000811180156116fe5750807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b1561170d576001925050611720565b508061171881613e87565b915050611659565b508061174557611731826001613dab565b61173e9060ff1684613d93565b925061174a565b600092505b508061175581613efb565b915050611648565b5050919050565b6000805461179490790100000000000000000000000000000000000000000000000000900460ff16612a30613de4565b60008054919250906117c59074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b9050818111611830576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f52455645414c5f504552494f445f4e4f545f53544152544544000000000000006044820152606401610569565b600054611860907a010000000000000000000000000000000000000000000000000000900460ff16612a30613de4565b61186a9083613d93565b81106118d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f52455645414c5f504552494f445f4f56455200000000000000000000000000006044820152606401610569565b600085815260026020526040902054600181141561194c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f414c52454144595f52455645414c4544000000000000000000000000000000006044820152606401610569565b8084878760405160200161196293929190613c15565b60405160208183030381529060405280519060200120146119df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f494e56414c49445f5345435245542700000000000000000000000000000000006044820152606401610569565b6000868152600260205260409020600190556119f9613813565b60005b60088160ff161015611b8e5760006001888360ff1660088110611a2157611a21613f8d565b602002016020810190611a349190613b59565b611a3e9190613e38565b9050828160ff1660088110611a5557611a55613f8d565b60200201805190611a6582613efb565b60ff90811690915260008054909250611abf918c91908516907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614612ecd565b60ff80851660009081526003602090815260408083209385168352929052205490915080611b0e5760ff80851660009081526003602090815260408083209386168352929052208b9055611b78565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14611b785760ff80851660009081526003602090815260408083209386168352929052207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90555b5050508080611b8690613efb565b9150506119fc565b5060005b60088160ff161015611c3657818160ff1660088110611bb357611bb3613f8d565b602002015160ff16600114611c24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f4445434b00000000000000000000000000000000000000006044820152606401610569565b80611c2e81613efb565b915050611b92565b50867f623ee6c2bd9ad515164ba132cb8f630acf54c0fd1e1118074c75676d8b41bab787604051611c679190613d2e565b60405180910390a250505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff82811691161415611cfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f4552433230000000000000000000000000000000000000006044820152606401610569565b6000611d0761271b565b509091505073ffffffffffffffffffffffffffffffffffffffff81163314611d8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f57494e4e4552000000000000000000000000000000000000000000006044820152606401610569565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83169063a9059cbb90339083906370a082319060240160206040518083038186803b158015611dfa57600080fd5b505afa158015611e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e329190613a0a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b158015611e9d57600080fd5b505af1158015611eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed59190613883565b505050565b600054611f0990790100000000000000000000000000000000000000000000000000900460ff16612a30613de4565b600054611f359074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b10611f9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f434f4d4d49545f504552494f445f4f56455200000000000000000000000000006044820152606401610569565b6001811415612007576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c4944204841534800000000000000000000000000000000000000006044820152606401610569565b6000828152600260209081526040808320849055600190915280822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633908117909155915490517f23b872dd00000000000000000000000000000000000000000000000000000000815260048101929092523060248301526044820184905273ffffffffffffffffffffffffffffffffffffffff16906323b872dd90606401600060405180830381600087803b1580156120c457600080fd5b505af11580156120d8573d6000803e3d6000fd5b50506040518381528492503391507f192b0f1468348c5b80c08a20c51326bcee8ea98f2ed5e7b813b6b24e279255029060200160405180910390a35050565b600061212886868686866001612fae565b9695505050505050565b61213a6137ed565b60408051610100810182526001815260026020808301919091526003828401526004606080840182905260056080850152600660a0850152600760c0850152600860e08501528451908101855286815260005494517fc87b56dd00000000000000000000000000000000000000000000000000000000815291820187905292939183019173ffffffffffffffffffffffffffffffffffffffff169063c87b56dd9060240160006040518083038186803b1580156121f657600080fd5b505afa15801561220a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526122509190810190613926565b81526000546020909101906122a490869085907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614612695565b90529392505050565b6000547c0100000000000000000000000000000000000000000000000000000000900460ff16612339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f5f4c4f4f545f544f5f57494e0000000000000000000000000000000000006044820152606401610569565b60005460ff7b0100000000000000000000000000000000000000000000000000000082048116916123a8917a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613d93565b6123b29190613d93565b6123be90612a30613de4565b6000546123ea9074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b10612451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f564943544f52595f504552494f445f4f564552000000000000000000000000006044820152606401610569565b600061245b61271b565b509091505073ffffffffffffffffffffffffffffffffffffffff811633146124df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f57494e4e4552000000000000000000000000000000000000000000006044820152606401610569565b60008281526001602052604090205473ffffffffffffffffffffffffffffffffffffffff163381141561256e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f414c52454144595f4f574e4552000000000000000000000000000000000000006044820152606401610569565b6000546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810185905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b1580156125e657600080fd5b505af11580156125fa573d6000803e3d6000fd5b5050600080547fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017815560405186935073ffffffffffffffffffffffffffffffffffffffff8516925033917f0e8ee02dcd808c59c531ff08aaa928ebb99be178ce4babf9a2c12820d6acde3e91a4505050565b600061212886868686866000612fae565b61269d613813565b60005b60088160ff161015612713576126df856001868460ff16600881106126c7576126c7613f8d565b60200201516126d69190613e38565b60ff1685612ecd565b828260ff16600881106126f4576126f4613f8d565b60ff90921660209290920201528061270b81613efb565b9150506126a0565b509392505050565b600080548190819061276d9060ff7a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613d93565b61277990612a30613de4565b6000546127a59074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b1161280c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f52455645414c5f504552494f445f4e4f545f4f564552000000000000000000006044820152606401610569565b612814613813565b60005b60088160ff1610156128f757607e5b60ff8116156128e45760ff821660009081526003602052604081208161284d600185613e38565b60ff1660ff1681526020019081526020016000205490506000811180156128945750807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156128d15780848460ff16600881106128af576128af613f8d565b60200201525073ffffffffffffffffffffffffffffffffffffffff95506128e4565b50806128dc81613e87565b915050612826565b50806128ef81613efb565b915050612817565b5073ffffffffffffffffffffffffffffffffffffffff8085161461292357506000938493508392509050565b60005b60088160ff161015612a3257600080805b60088160ff1610156129ef57848160ff166008811061295857612958613f8d565b602002015161297d5761296c816001613dab565b6129769084613dab565b92506129dd565b848460ff166008811061299257612992613f8d565b6020020151858260ff16600881106129ac576129ac613f8d565b602002015114156129dd576129c2816001613dab565b6129cc9084613dab565b6129d69083613dab565b9150600092505b806129e781613efb565b915050612937565b50848160ff1610612a1d57838360ff1660088110612a0f57612a0f613f8d565b602002015195508060ff1694505b50508080612a2a90613efb565b915050612926565b505060008281526001602052604090205473ffffffffffffffffffffffffffffffffffffffff169391925090565b60005474010000000000000000000000000000000000000000900464ffffffffff1615612ae9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f414c52454144595f494e495449414c49534544000000000000000000000000006044820152606401610569565b60028360ff161015612b57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f434f4d4d49545f504552494f445f544f4f5f53484f52540000000000000000006044820152606401610569565b60088360ff161015612b72578260ff168260ff161015612b7b565b60088260ff1610155b612be1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f52455645414c5f504552494f445f544f4f5f53484f52540000000000000000006044820152606401610569565b60188260ff161115612c4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f52455645414c5f504552494f445f544f4f5f4c4f4e47000000000000000000006044820152606401610569565b60088360ff161015612c6a578260ff168160ff161015612c73565b60088160ff1610155b612cd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f57494e4e45525f504552494f445f544f4f5f53484f52540000000000000000006044820152606401610569565b60188160ff161115612d47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f57494e4e45525f504552494f445f544f4f5f4c4f4e47000000000000000000006044820152606401610569565b6000805473ffffffffffffffffffffffffffffffffffffffff969096167fffffff00ffffffffffffffff0000000000000000000000000000000000000000909616959095177c010000000000000000000000000000000000000000000000000000000094151594909402939093177fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000004264ffffffffff16027fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff161779010000000000000000000000000000000000000000000000000060ff93841602177fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff167a010000000000000000000000000000000000000000000000000000918316919091027fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffff16177b010000000000000000000000000000000000000000000000000000009290911691909102179055565b6000806000612edd868686613278565b91509150600e8111612ef157506003612f17565b8060131415612f0257506001612f17565b8060141415612f1357506000612f17565b5060025b84612f3057612f2782607d613e21565b92505050612fa7565b6006851015612f705781612f45600187613e21565b612f5090600f613de4565b612f5b906012613d93565b612f659190613d93565b612f2790607d613e21565b8460061415612f905780612f85836004613de4565b612f5b90605d613d93565b80612f9c836004613de4565b612f5b906069613d93565b9392505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5460009073ffffffffffffffffffffffffffffffffffffffff8116612ff15750305b6000612ffc82613582565b90508315613153576040517f506c0e8600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152891515602483015260ff808a16604484015280891660648401528716608483015282169063506c0e869060a401600060405180830381600087803b15801561308e57600080fd5b505af11580156130a2573d6000803e3d6000fd5b50506040517f40b197f300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600160248301527f00000000000000000000000000000000000000000000000000000000000000001692506340b197f39150604401600060405180830381600087803b15801561313657600080fd5b505af115801561314a573d6000803e3d6000fd5b505050506131f6565b6040517f8e76c69200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152891515602483015260ff808a166044840152808916606484015287166084830152821690638e76c6929060a401600060405180830381600087803b1580156131dd57600080fd5b505af11580156131f1573d6000803e3d6000fd5b505050505b60408051891515815260ff8981166020830152888116828401528716606082015273ffffffffffffffffffffffffffffffffffffffff838116608083015286151560a08301529151918b16917f3c435f0f4c8d3281c30467f5800662ad76dda5306fceb1c95958c661e961da849181900360c00190a298975050505050505050565b60408051808201909152600681527f574541504f4e000000000000000000000000000000000000000000000000000060208201526000908190601260018614156132f957505060408051808201909152600581527f43484553540000000000000000000000000000000000000000000000000000006020820152600f613499565b856002141561333f57505060408051808201909152600481527f48454144000000000000000000000000000000000000000000000000000000006020820152600f613499565b856003141561338557505060408051808201909152600581527f57414953540000000000000000000000000000000000000000000000000000006020820152600f613499565b85600414156133cb57505060408051808201909152600481527f464f4f54000000000000000000000000000000000000000000000000000000006020820152600f613499565b856005141561341157505060408051808201909152600481527f48414e44000000000000000000000000000000000000000000000000000000006020820152600f613499565b856006141561345757505060408051808201909152600481527f4e45434b0000000000000000000000000000000000000000000000000000000060208201526003613499565b856007141561349957505060408051808201909152600481527f52494e4700000000000000000000000000000000000000000000000000000000602082015260055b60008515806134a95750611f4188105b156134e7576134e0836134bb8a613664565b6040516020016134cc929190613c7f565b60405160208183030381529060405261379e565b905061355e565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608a901b16602082015261355b908490603401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526134cc9291602001613c7f565b90505b6135688282613f1b565b9450613575601582613f1b565b9350505050935093915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff811661365f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401610569565b919050565b6060816136a457505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156136ce57806136b881613ec2565b91506136c79050600a83613dd0565b91506136a8565b60008167ffffffffffffffff8111156136e9576136e9613fbc565b6040519080825280601f01601f191660200182016040528015613713576020820181803683370190505b5090505b841561379657613728600183613e21565b9150613735600a86613f1b565b613740906030613d93565b60f81b81838151811061375557613755613f8d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061378f600a86613dd0565b9450613717565b949350505050565b6000816040516020016137b19190613c63565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012092915050565b6040518060600160405280600081526020016060815260200161380e613813565b905290565b6040518061010001604052806008906020820280368337509192915050565b803561365f81614010565b803560ff8116811461365f57600080fd5b60008060006060848603121561386357600080fd5b833561386e81613feb565b95602085013595506040909401359392505050565b60006020828403121561389557600080fd5b8151612fa781614010565b6000602082840312156138b257600080fd5b8135612fa781613feb565b600080600080600060a086880312156138d557600080fd5b85356138e081613feb565b945060208601356138f081614010565b93506138fe6040870161383d565b925061390c6060870161383d565b915061391a6080870161383d565b90509295509295909350565b60006020828403121561393857600080fd5b815167ffffffffffffffff8082111561395057600080fd5b818401915084601f83011261396457600080fd5b81518181111561397657613976613fbc565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156139bc576139bc613fbc565b816040528281528760208487010111156139d557600080fd5b6139e6836020830160208801613e5b565b979650505050505050565b600060208284031215613a0357600080fd5b5035919050565b600060208284031215613a1c57600080fd5b5051919050565b60008060006101408486031215613a3957600080fd5b83359250610120840185811115613a4f57600080fd5b60208501925080359150509250925092565b60008060006101408486031215613a7757600080fd5b83359250602085603f860112613a8c57600080fd5b604051610100810181811067ffffffffffffffff82111715613ab057613ab0613fbc565b60405280868301610120880189811115613ac957600080fd5b60005b6008811015613af057613ade8361383d565b84529285019291850191600101613acc565b50839650613afd81613832565b955050505050509250925092565b60008060408385031215613b1e57600080fd5b50508035926020909101359150565b600080600060608486031215613b4257600080fd5b505081359360208301359350604090920135919050565b600060208284031215613b6b57600080fd5b612fa78261383d565b8060005b6008811015613b9a57815160ff16845260209384019390910190600101613b78565b50505050565b6000610140825184526020830151816020860152805180838701526101609250613bd08184880160208501613e5b565b60408501519150613be46040870183613b74565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01694909401019392505050565b838152600060208481840152604083018460005b6008811015613c505760ff613c3d8361383d565b1683529183019190830190600101613c29565b5050505061014082019050949350505050565b60008251613c75818460208701613e5b565b9190910192915050565b60008351613c91818460208801613e5b565b835190830190613ca5818360208801613e5b565b01949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613d21577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452613d0f858351613ba0565b94509285019290850190600101613cd5565b5092979650505050505050565b6101008101818360005b6008811015613d625760ff613d4c8361383d565b1683526020928301929190910190600101613d38565b50505092915050565b6101008101613d7a8284613b74565b92915050565b602081526000612fa76020830184613ba0565b60008219821115613da657613da6613f2f565b500190565b600060ff821660ff84168060ff03821115613dc857613dc8613f2f565b019392505050565b600082613ddf57613ddf613f5e565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e1c57613e1c613f2f565b500290565b600082821015613e3357613e33613f2f565b500390565b600060ff821660ff841680821015613e5257613e52613f2f565b90039392505050565b60005b83811015613e76578181015183820152602001613e5e565b83811115613b9a5750506000910152565b600060ff821680613e9a57613e9a613f2f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613ef457613ef4613f2f565b5060010190565b600060ff821660ff811415613f1257613f12613f2f565b60010192915050565b600082613f2a57613f2a613f5e565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461400d57600080fd5b50565b801515811461400d57600080fdfea2646970667358221220c49ea9f949b25cbba1af150804365d07fe22358f713fe5ca85b5900876d44d4a64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80638c5e14a4116100b2578063b09afec111610081578063d06a724411610066578063d06a72441461043e578063d378d09614610451578063dfbf53ae1461047157600080fd5b8063b09afec11461040b578063bbe0e56e1461042b57600080fd5b80638c5e14a41461038d5780638e76c692146103ad5780639b17ac66146103c05780639b4557e8146103d357600080fd5b8063506c0e86116101095780636c37648a116100ee5780636c37648a14610346578063745fb2d6146103675780637eee28df1461037a57600080fd5b8063506c0e861461019f5780635e615a6b146101b257600080fd5b80631b16b4d31461013b5780631c0dcf87146101505780631f89d097146101635780633a5110db14610176575b600080fd5b61014e610149366004613b2d565b6104ab565b005b61014e61015e3660046139f1565b61085e565b61014e6101713660046139f1565b610aad565b61018961018436600461384e565b610edd565b6040516101969190613cae565b60405180910390f35b61014e6101ad3660046138bd565b6112cf565b6102d26040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506040805160c08101825260005473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff74010000000000000000000000000000000000000000820416602083015260ff79010000000000000000000000000000000000000000000000000082048116938301939093527a0100000000000000000000000000000000000000000000000000008104831660608301527b010000000000000000000000000000000000000000000000000000008104831660808301527c01000000000000000000000000000000000000000000000000000000009004909116151560a082015290565b6040516101969190600060c08201905073ffffffffffffffffffffffffffffffffffffffff835116825264ffffffffff602084015116602083015260ff604084015116604083015260ff606084015116606083015260ff608084015116608083015260a0830151151560a083015292915050565b6103596103543660046139f1565b6114c1565b604051908152602001610196565b61014e610375366004613a23565b611764565b61014e6103883660046138a0565b611c78565b61035961039b3660046139f1565b60009081526002602052604090205490565b61014e6103bb3660046138bd565b6114ad565b61014e6103ce366004613b0b565b611eda565b6103e66103e13660046138bd565b612117565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610196565b61041e6104193660046139f1565b612132565b6040516101969190613d80565b61014e6104393660046139f1565b6122ad565b6103e661044c3660046138bd565b612684565b61046461045f366004613a61565b612695565b6040516101969190613d6b565b61047961271b565b6040805173ffffffffffffffffffffffffffffffffffffffff9094168452602084019290925290820152606001610196565b6000546104da90790100000000000000000000000000000000000000000000000000900460ff16612a30613de4565b6000546105069074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b10610572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f434f4d4d49545f504552494f445f4f564552000000000000000000000000000060448201526064015b60405180910390fd5b60018114156105dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c4944204841534800000000000000000000000000000000000000006044820152606401610569565b60008381526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16331461066a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e4f545f594f55525f4c4f4f54000000000000000000000000000000000000006044820152606401610569565b60008281526002602052604090208190558282146107f5576000838152600260209081526040808320839055600190915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116909155848352818320805433921682179055915490517f42842e0e00000000000000000000000000000000000000000000000000000000815230600482015260248101929092526044820185905273ffffffffffffffffffffffffffffffffffffffff16906342842e0e90606401600060405180830381600087803b15801561074c57600080fd5b505af1158015610760573d6000803e3d6000fd5b50506000546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810186905273ffffffffffffffffffffffffffffffffffffffff90911692506323b872dd9150606401600060405180830381600087803b1580156107dc57600080fd5b505af11580156107f0573d6000803e3d6000fd5b505050505b604051839033907ff1c7f9718b5514ae194b133997551a0ae0cd216fecedde802c4530bd52d3a59290600090a3604051818152829033907f192b0f1468348c5b80c08a20c51326bcee8ea98f2ed5e7b813b6b24e279255029060200160405180910390a3505050565b60005461088d90790100000000000000000000000000000000000000000000000000900460ff16612a30613de4565b6000546108b99074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b10610920576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f434f4d4d49545f504552494f445f4f56455200000000000000000000000000006044820152606401610569565b60008181526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1633146109ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e4f545f594f55525f4c4f4f54000000000000000000000000000000000000006044820152606401610569565b6000818152600260209081526040808320839055600190915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055905490517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b158015610a6557600080fd5b505af1158015610a79573d6000803e3d6000fd5b50506040518392503391507ff1c7f9718b5514ae194b133997551a0ae0cd216fecedde802c4530bd52d3a59290600090a350565b6000806000610aba61271b565b600054929550909350915060ff7b010000000000000000000000000000000000000000000000000000008204811691610b31917a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613d93565b610b3b9190613d93565b610b4790612a30613de4565b600054610b739074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b11610bf65773ffffffffffffffffffffffffffffffffffffffff831615610bf6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f564943544f52595f504552494f445f4e4f545f4f5645520000000000000000006044820152606401610569565b60008481526001602052604090205473ffffffffffffffffffffffffffffffffffffffff163314610c83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610569565b600084815260026020526040902054600114610cfb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4449445f4e4f545f52455645414c0000000000000000000000000000000000006044820152606401610569565b6000546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810186905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b158015610d7357600080fd5b505af1158015610d87573d6000803e3d6000fd5b50505050600082851415610da857610da182612710613de4565b9050610dd0565b6000610db3866114c1565b9050610dc1816103e8613de4565b610dcc906064613d93565b9150505b6040517f5146ea0e00000000000000000000000000000000000000000000000000000000815260048101869052602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635146ea0e90604401602060405180830381600087803b158015610e5f57600080fd5b505af1158015610e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e979190613883565b610e9f575060005b604051818152859033907f5892c6cb1d782a4f640c83141dd6dd939c114e55b9f5b700b15affb6d1fc7b849060200160405180910390a35050505050565b600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526060939216906370a082319060240160206040518083038186803b158015610f4b57600080fd5b505afa158015610f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f839190613a0a565b9050610f8f8385613d93565b811015610ff8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f544f4f5f4d414e595f544f4b454e5f52455155455354454400000000000000006044820152606401610569565b8267ffffffffffffffff81111561101157611011613fbc565b60405190808252806020026020018201604052801561104a57816020015b6110376137ed565b81526020019060019003908161102f5790505b50604080516101008101825260018152600260208201526003918101919091526004606082015260056080820152600660a0820152600760c0820152600860e082015290925060005b848110156112c5576000805473ffffffffffffffffffffffffffffffffffffffff16632f745c59896110c5858b613d93565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482015260440160206040518083038186803b15801561112e57600080fd5b505afa158015611142573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111669190613a0a565b6040805160608101825282815260005491517fc87b56dd0000000000000000000000000000000000000000000000000000000081526004810184905292935091602083019173ffffffffffffffffffffffffffffffffffffffff169063c87b56dd9060240160006040518083038186803b1580156111e357600080fd5b505afa1580156111f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261123d9190810190613926565b815260005460209091019061129190849087907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614612695565b8152508583815181106112a6576112a6613f8d565b602002602001018190525081806112bc90613ec2565b92505050611093565b5050509392505050565b73ffffffffffffffffffffffffffffffffffffffff851661134c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5a45524f5f4c4f4f540000000000000000000000000000006044820152606401610569565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806113f157507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b8061144757507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b6114ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c4944204c4f4f5400000000000000000000000000000000000000006044820152606401610569565b6114ba8585858585612a60565b5050505050565b600080821180156114f25750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b611558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f4c4f4f5400000000000000000000000000000000000000006044820152606401610569565b6000546115a59060ff7a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613d93565b6115b190612a30613de4565b6000546115dd9074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b11611644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f52455645414c5f504552494f445f4e4f545f4f564552000000000000000000006044820152606401610569565b6000805b60088160ff16101561175d576000607e5b60ff8116156117205760ff8316600090815260036020526040812081611680600185613e38565b60ff1660ff168152602001908152602001600020549050868114156116ce57846116ab856001613dab565b60ff166116b89190613d93565b6116c29087613d93565b95506001925050611720565b6000811180156116fe5750807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b1561170d576001925050611720565b508061171881613e87565b915050611659565b508061174557611731826001613dab565b61173e9060ff1684613d93565b925061174a565b600092505b508061175581613efb565b915050611648565b5050919050565b6000805461179490790100000000000000000000000000000000000000000000000000900460ff16612a30613de4565b60008054919250906117c59074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b9050818111611830576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f52455645414c5f504552494f445f4e4f545f53544152544544000000000000006044820152606401610569565b600054611860907a010000000000000000000000000000000000000000000000000000900460ff16612a30613de4565b61186a9083613d93565b81106118d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f52455645414c5f504552494f445f4f56455200000000000000000000000000006044820152606401610569565b600085815260026020526040902054600181141561194c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f414c52454144595f52455645414c4544000000000000000000000000000000006044820152606401610569565b8084878760405160200161196293929190613c15565b60405160208183030381529060405280519060200120146119df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f494e56414c49445f5345435245542700000000000000000000000000000000006044820152606401610569565b6000868152600260205260409020600190556119f9613813565b60005b60088160ff161015611b8e5760006001888360ff1660088110611a2157611a21613f8d565b602002016020810190611a349190613b59565b611a3e9190613e38565b9050828160ff1660088110611a5557611a55613f8d565b60200201805190611a6582613efb565b60ff90811690915260008054909250611abf918c91908516907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614612ecd565b60ff80851660009081526003602090815260408083209385168352929052205490915080611b0e5760ff80851660009081526003602090815260408083209386168352929052208b9055611b78565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14611b785760ff80851660009081526003602090815260408083209386168352929052207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90555b5050508080611b8690613efb565b9150506119fc565b5060005b60088160ff161015611c3657818160ff1660088110611bb357611bb3613f8d565b602002015160ff16600114611c24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f4445434b00000000000000000000000000000000000000006044820152606401610569565b80611c2e81613efb565b915050611b92565b50867f623ee6c2bd9ad515164ba132cb8f630acf54c0fd1e1118074c75676d8b41bab787604051611c679190613d2e565b60405180910390a250505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff82811691161415611cfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f4552433230000000000000000000000000000000000000006044820152606401610569565b6000611d0761271b565b509091505073ffffffffffffffffffffffffffffffffffffffff81163314611d8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f57494e4e4552000000000000000000000000000000000000000000006044820152606401610569565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83169063a9059cbb90339083906370a082319060240160206040518083038186803b158015611dfa57600080fd5b505afa158015611e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e329190613a0a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b158015611e9d57600080fd5b505af1158015611eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed59190613883565b505050565b600054611f0990790100000000000000000000000000000000000000000000000000900460ff16612a30613de4565b600054611f359074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b10611f9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f434f4d4d49545f504552494f445f4f56455200000000000000000000000000006044820152606401610569565b6001811415612007576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c4944204841534800000000000000000000000000000000000000006044820152606401610569565b6000828152600260209081526040808320849055600190915280822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633908117909155915490517f23b872dd00000000000000000000000000000000000000000000000000000000815260048101929092523060248301526044820184905273ffffffffffffffffffffffffffffffffffffffff16906323b872dd90606401600060405180830381600087803b1580156120c457600080fd5b505af11580156120d8573d6000803e3d6000fd5b50506040518381528492503391507f192b0f1468348c5b80c08a20c51326bcee8ea98f2ed5e7b813b6b24e279255029060200160405180910390a35050565b600061212886868686866001612fae565b9695505050505050565b61213a6137ed565b60408051610100810182526001815260026020808301919091526003828401526004606080840182905260056080850152600660a0850152600760c0850152600860e08501528451908101855286815260005494517fc87b56dd00000000000000000000000000000000000000000000000000000000815291820187905292939183019173ffffffffffffffffffffffffffffffffffffffff169063c87b56dd9060240160006040518083038186803b1580156121f657600080fd5b505afa15801561220a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526122509190810190613926565b81526000546020909101906122a490869085907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614612695565b90529392505050565b6000547c0100000000000000000000000000000000000000000000000000000000900460ff16612339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f5f4c4f4f545f544f5f57494e0000000000000000000000000000000000006044820152606401610569565b60005460ff7b0100000000000000000000000000000000000000000000000000000082048116916123a8917a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613d93565b6123b29190613d93565b6123be90612a30613de4565b6000546123ea9074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b10612451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f564943544f52595f504552494f445f4f564552000000000000000000000000006044820152606401610569565b600061245b61271b565b509091505073ffffffffffffffffffffffffffffffffffffffff811633146124df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f57494e4e4552000000000000000000000000000000000000000000006044820152606401610569565b60008281526001602052604090205473ffffffffffffffffffffffffffffffffffffffff163381141561256e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f414c52454144595f4f574e4552000000000000000000000000000000000000006044820152606401610569565b6000546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810185905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b1580156125e657600080fd5b505af11580156125fa573d6000803e3d6000fd5b5050600080547fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017815560405186935073ffffffffffffffffffffffffffffffffffffffff8516925033917f0e8ee02dcd808c59c531ff08aaa928ebb99be178ce4babf9a2c12820d6acde3e91a4505050565b600061212886868686866000612fae565b61269d613813565b60005b60088160ff161015612713576126df856001868460ff16600881106126c7576126c7613f8d565b60200201516126d69190613e38565b60ff1685612ecd565b828260ff16600881106126f4576126f4613f8d565b60ff90921660209290920201528061270b81613efb565b9150506126a0565b509392505050565b600080548190819061276d9060ff7a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613d93565b61277990612a30613de4565b6000546127a59074010000000000000000000000000000000000000000900464ffffffffff1642613e21565b1161280c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f52455645414c5f504552494f445f4e4f545f4f564552000000000000000000006044820152606401610569565b612814613813565b60005b60088160ff1610156128f757607e5b60ff8116156128e45760ff821660009081526003602052604081208161284d600185613e38565b60ff1660ff1681526020019081526020016000205490506000811180156128945750807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156128d15780848460ff16600881106128af576128af613f8d565b60200201525073ffffffffffffffffffffffffffffffffffffffff95506128e4565b50806128dc81613e87565b915050612826565b50806128ef81613efb565b915050612817565b5073ffffffffffffffffffffffffffffffffffffffff8085161461292357506000938493508392509050565b60005b60088160ff161015612a3257600080805b60088160ff1610156129ef57848160ff166008811061295857612958613f8d565b602002015161297d5761296c816001613dab565b6129769084613dab565b92506129dd565b848460ff166008811061299257612992613f8d565b6020020151858260ff16600881106129ac576129ac613f8d565b602002015114156129dd576129c2816001613dab565b6129cc9084613dab565b6129d69083613dab565b9150600092505b806129e781613efb565b915050612937565b50848160ff1610612a1d57838360ff1660088110612a0f57612a0f613f8d565b602002015195508060ff1694505b50508080612a2a90613efb565b915050612926565b505060008281526001602052604090205473ffffffffffffffffffffffffffffffffffffffff169391925090565b60005474010000000000000000000000000000000000000000900464ffffffffff1615612ae9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f414c52454144595f494e495449414c49534544000000000000000000000000006044820152606401610569565b60028360ff161015612b57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f434f4d4d49545f504552494f445f544f4f5f53484f52540000000000000000006044820152606401610569565b60088360ff161015612b72578260ff168260ff161015612b7b565b60088260ff1610155b612be1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f52455645414c5f504552494f445f544f4f5f53484f52540000000000000000006044820152606401610569565b60188260ff161115612c4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f52455645414c5f504552494f445f544f4f5f4c4f4e47000000000000000000006044820152606401610569565b60088360ff161015612c6a578260ff168160ff161015612c73565b60088160ff1610155b612cd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f57494e4e45525f504552494f445f544f4f5f53484f52540000000000000000006044820152606401610569565b60188160ff161115612d47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f57494e4e45525f504552494f445f544f4f5f4c4f4e47000000000000000000006044820152606401610569565b6000805473ffffffffffffffffffffffffffffffffffffffff969096167fffffff00ffffffffffffffff0000000000000000000000000000000000000000909616959095177c010000000000000000000000000000000000000000000000000000000094151594909402939093177fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000004264ffffffffff16027fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff161779010000000000000000000000000000000000000000000000000060ff93841602177fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff167a010000000000000000000000000000000000000000000000000000918316919091027fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffff16177b010000000000000000000000000000000000000000000000000000009290911691909102179055565b6000806000612edd868686613278565b91509150600e8111612ef157506003612f17565b8060131415612f0257506001612f17565b8060141415612f1357506000612f17565b5060025b84612f3057612f2782607d613e21565b92505050612fa7565b6006851015612f705781612f45600187613e21565b612f5090600f613de4565b612f5b906012613d93565b612f659190613d93565b612f2790607d613e21565b8460061415612f905780612f85836004613de4565b612f5b90605d613d93565b80612f9c836004613de4565b612f5b906069613d93565b9392505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5460009073ffffffffffffffffffffffffffffffffffffffff8116612ff15750305b6000612ffc82613582565b90508315613153576040517f506c0e8600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152891515602483015260ff808a16604484015280891660648401528716608483015282169063506c0e869060a401600060405180830381600087803b15801561308e57600080fd5b505af11580156130a2573d6000803e3d6000fd5b50506040517f40b197f300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600160248301527f00000000000000000000000000000000000000000000000000000000000000001692506340b197f39150604401600060405180830381600087803b15801561313657600080fd5b505af115801561314a573d6000803e3d6000fd5b505050506131f6565b6040517f8e76c69200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152891515602483015260ff808a166044840152808916606484015287166084830152821690638e76c6929060a401600060405180830381600087803b1580156131dd57600080fd5b505af11580156131f1573d6000803e3d6000fd5b505050505b60408051891515815260ff8981166020830152888116828401528716606082015273ffffffffffffffffffffffffffffffffffffffff838116608083015286151560a08301529151918b16917f3c435f0f4c8d3281c30467f5800662ad76dda5306fceb1c95958c661e961da849181900360c00190a298975050505050505050565b60408051808201909152600681527f574541504f4e000000000000000000000000000000000000000000000000000060208201526000908190601260018614156132f957505060408051808201909152600581527f43484553540000000000000000000000000000000000000000000000000000006020820152600f613499565b856002141561333f57505060408051808201909152600481527f48454144000000000000000000000000000000000000000000000000000000006020820152600f613499565b856003141561338557505060408051808201909152600581527f57414953540000000000000000000000000000000000000000000000000000006020820152600f613499565b85600414156133cb57505060408051808201909152600481527f464f4f54000000000000000000000000000000000000000000000000000000006020820152600f613499565b856005141561341157505060408051808201909152600481527f48414e44000000000000000000000000000000000000000000000000000000006020820152600f613499565b856006141561345757505060408051808201909152600481527f4e45434b0000000000000000000000000000000000000000000000000000000060208201526003613499565b856007141561349957505060408051808201909152600481527f52494e4700000000000000000000000000000000000000000000000000000000602082015260055b60008515806134a95750611f4188105b156134e7576134e0836134bb8a613664565b6040516020016134cc929190613c7f565b60405160208183030381529060405261379e565b905061355e565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608a901b16602082015261355b908490603401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526134cc9291602001613c7f565b90505b6135688282613f1b565b9450613575601582613f1b565b9350505050935093915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff811661365f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401610569565b919050565b6060816136a457505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156136ce57806136b881613ec2565b91506136c79050600a83613dd0565b91506136a8565b60008167ffffffffffffffff8111156136e9576136e9613fbc565b6040519080825280601f01601f191660200182016040528015613713576020820181803683370190505b5090505b841561379657613728600183613e21565b9150613735600a86613f1b565b613740906030613d93565b60f81b81838151811061375557613755613f8d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061378f600a86613dd0565b9450613717565b949350505050565b6000816040516020016137b19190613c63565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012092915050565b6040518060600160405280600081526020016060815260200161380e613813565b905290565b6040518061010001604052806008906020820280368337509192915050565b803561365f81614010565b803560ff8116811461365f57600080fd5b60008060006060848603121561386357600080fd5b833561386e81613feb565b95602085013595506040909401359392505050565b60006020828403121561389557600080fd5b8151612fa781614010565b6000602082840312156138b257600080fd5b8135612fa781613feb565b600080600080600060a086880312156138d557600080fd5b85356138e081613feb565b945060208601356138f081614010565b93506138fe6040870161383d565b925061390c6060870161383d565b915061391a6080870161383d565b90509295509295909350565b60006020828403121561393857600080fd5b815167ffffffffffffffff8082111561395057600080fd5b818401915084601f83011261396457600080fd5b81518181111561397657613976613fbc565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156139bc576139bc613fbc565b816040528281528760208487010111156139d557600080fd5b6139e6836020830160208801613e5b565b979650505050505050565b600060208284031215613a0357600080fd5b5035919050565b600060208284031215613a1c57600080fd5b5051919050565b60008060006101408486031215613a3957600080fd5b83359250610120840185811115613a4f57600080fd5b60208501925080359150509250925092565b60008060006101408486031215613a7757600080fd5b83359250602085603f860112613a8c57600080fd5b604051610100810181811067ffffffffffffffff82111715613ab057613ab0613fbc565b60405280868301610120880189811115613ac957600080fd5b60005b6008811015613af057613ade8361383d565b84529285019291850191600101613acc565b50839650613afd81613832565b955050505050509250925092565b60008060408385031215613b1e57600080fd5b50508035926020909101359150565b600080600060608486031215613b4257600080fd5b505081359360208301359350604090920135919050565b600060208284031215613b6b57600080fd5b612fa78261383d565b8060005b6008811015613b9a57815160ff16845260209384019390910190600101613b78565b50505050565b6000610140825184526020830151816020860152805180838701526101609250613bd08184880160208501613e5b565b60408501519150613be46040870183613b74565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01694909401019392505050565b838152600060208481840152604083018460005b6008811015613c505760ff613c3d8361383d565b1683529183019190830190600101613c29565b5050505061014082019050949350505050565b60008251613c75818460208701613e5b565b9190910192915050565b60008351613c91818460208801613e5b565b835190830190613ca5818360208801613e5b565b01949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613d21577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452613d0f858351613ba0565b94509285019290850190600101613cd5565b5092979650505050505050565b6101008101818360005b6008811015613d625760ff613d4c8361383d565b1683526020928301929190910190600101613d38565b50505092915050565b6101008101613d7a8284613b74565b92915050565b602081526000612fa76020830184613ba0565b60008219821115613da657613da6613f2f565b500190565b600060ff821660ff84168060ff03821115613dc857613dc8613f2f565b019392505050565b600082613ddf57613ddf613f5e565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e1c57613e1c613f2f565b500290565b600082821015613e3357613e33613f2f565b500390565b600060ff821660ff841680821015613e5257613e52613f2f565b90039392505050565b60005b83811015613e76578181015183820152602001613e5e565b83811115613b9a5750506000910152565b600060ff821680613e9a57613e9a613f2f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613ef457613ef4613f2f565b5060010190565b600060ff821660ff811415613f1257613f12613f2f565b60010192915050565b600082613f2a57613f2a613f5e565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461400d57600080fd5b50565b801515811461400d57600080fdfea2646970667358221220c49ea9f949b25cbba1af150804365d07fe22358f713fe5ca85b5900876d44d4a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTokenDataOfOwner(address,uint256,uint256)": {
        "notice": "get all info in the minimum calls"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 429,
        "contract": "src/YooLoot.sol:YooLoot",
        "label": "_paramaters",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Parameters)417_storage"
      },
      {
        "astId": 433,
        "contract": "src/YooLoot.sol:YooLoot",
        "label": "_deposits",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 437,
        "contract": "src/YooLoot.sol:YooLoot",
        "label": "_deckHashes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 443,
        "contract": "src/YooLoot.sol:YooLoot",
        "label": "_rounds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_mapping(t_uint8,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ILoot)2672": {
        "encoding": "inplace",
        "label": "contract ILoot",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint8,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Parameters)417_storage": {
        "encoding": "inplace",
        "label": "struct YooLoot.Parameters",
        "members": [
          {
            "astId": 406,
            "contract": "src/YooLoot.sol:YooLoot",
            "label": "loot",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ILoot)2672"
          },
          {
            "astId": 408,
            "contract": "src/YooLoot.sol:YooLoot",
            "label": "startTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 410,
            "contract": "src/YooLoot.sol:YooLoot",
            "label": "commit3HPeriod",
            "offset": 25,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 412,
            "contract": "src/YooLoot.sol:YooLoot",
            "label": "reveal3HPeriod",
            "offset": 26,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 414,
            "contract": "src/YooLoot.sol:YooLoot",
            "label": "winner3HPeriod",
            "offset": 27,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 416,
            "contract": "src/YooLoot.sol:YooLoot",
            "label": "winnerGetLoot",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}