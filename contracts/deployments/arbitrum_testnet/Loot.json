{
  "address": "0xcC0925082BfB1122534d1a7A33BD1DC990113a39",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeMinter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_warpedLoot",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_set",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "NewSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LOOT_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_set",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "addSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getChest",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFoot",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getHand",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getHead",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNeck",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRing",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSetInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "set",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct Deevy.DeevySet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getWaist",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getWeapon",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "lootTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeMinter",
          "type": "address"
        }
      ],
      "name": "setBridgeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newMinterAddress",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "setNames",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sets",
      "outputs": [
        {
          "internalType": "address",
          "name": "set",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "warpLoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa3a8742689e6597fe5550a41108d470dcc9ef257f528faec7b96c367aec8dd9",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0xcC0925082BfB1122534d1a7A33BD1DC990113a39",
    "transactionIndex": 0,
    "gasUsed": "97469957",
    "logsBloom": "0x00000000000000000000000000400000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000010000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000200021000000000000000000000000000000002000000000000000000000000000000000",
    "blockHash": "0xd6df22ece53e883c9d1e24edf49450ec5a73cc44065efc68738fb3dad903961a",
    "transactionHash": "0xaa3a8742689e6597fe5550a41108d470dcc9ef257f528faec7b96c367aec8dd9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4290129,
        "transactionHash": "0xaa3a8742689e6597fe5550a41108d470dcc9ef257f528faec7b96c367aec8dd9",
        "address": "0xcC0925082BfB1122534d1a7A33BD1DC990113a39",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000061c461ecc993aadeb7e4b47e96d1b8cc37314b20"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd6df22ece53e883c9d1e24edf49450ec5a73cc44065efc68738fb3dad903961a"
      }
    ],
    "blockNumber": 4290129,
    "cumulativeGasUsed": "74491577",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "2c16af127483e1706812cbdf023c0c4c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeMinter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_warpedLoot\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_set\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"NewSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOOT_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_set\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"addSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getChest\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFoot\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHand\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHead\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNeck\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRing\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"set\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct Deevy.DeevySet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getWaist\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getWeapon\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lootTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeMinter\",\"type\":\"address\"}],\"name\":\"setBridgeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMinterAddress\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"setNames\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"set\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"warpLoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/external/solc_0.6.12/Deevy.sol\":\"Deevy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/external/solc_0.6.12/Deevy.sol\":{\"content\":\"/**\\n *Submitted for verification at arbiscan.io on 2021-09-10\\n*/\\n\\n////// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n////import \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [////IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * ////IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n////import \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n////import \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n////import \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n////import \\\"../utils/Context.sol\\\";\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n////import \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\npragma solidity 0.6.12;\\n\\n////import {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface ILoot is IERC721 {\\n    function getWeapon(uint256 tokenId) external view returns (string memory);\\n\\n    function getChest(uint256 tokenId) external view returns (string memory);\\n\\n    function getHead(uint256 tokenId) external view returns (string memory);\\n\\n    function getWaist(uint256 tokenId) external view returns (string memory);\\n\\n    function getFoot(uint256 tokenId) external view returns (string memory);\\n\\n    function getHand(uint256 tokenId) external view returns (string memory);\\n\\n    function getNeck(uint256 tokenId) external view returns (string memory);\\n\\n    function getRing(uint256 tokenId) external view returns (string memory);\\n\\n    function tokenUri(uint256 tokenId) external view returns (string memory);\\n}\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IDeevySet {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n}\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\npragma solidity 0.6.12;\\n\\n////import {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IDeevy is IERC721 {\\n    function warpLoot(address account, uint256 tokenId) external;\\n\\n    // function claim(address account, uint256 tokenId) external;\\n    function claim(uint256 tokenId) external;\\n\\n    function ownerClaim(uint256 tokenId) external;\\n}\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n// Copied from https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/release-v3.1.0/contracts/token/ERC721/ERC721.sol\\n// It only changes the ////imports.\\npragma solidity ^0.6.0;\\n\\n////import {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n////import \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n////import \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n////import \\\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\\\";\\n////import \\\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\n////import \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n////import \\\"@openzeppelin/contracts/introspection/ERC165.sol\\\";\\n////import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n////import \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n////import \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n////import \\\"@openzeppelin/contracts/utils/EnumerableMap.sol\\\";\\n////import \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping(address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(_baseURI).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(_baseURI, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\\n    }\\n\\n    /**\\n     * @dev Returns the base URI set via {_setBaseURI}. This will be\\n     * automatically added as a prefix in {tokenURI} to each token's URI, or\\n     * to the token ID if no specific URI is set for that token ID.\\n     */\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mecanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata =\\n            to.functionCall(\\n                abi.encodeWithSelector(\\n                    IERC721Receiver(to).onERC721Received.selector,\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                ),\\n                \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n            );\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n\\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\n\\n////import {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n////import { ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n////import \\\"./tokens/ERC721.sol\\\";\\n////import {IDeevy} from \\\"./IDeevy.sol\\\";\\n////import {IDeevySet} from \\\"./IDeevySet.sol\\\";\\n////import {ILoot} from \\\"./ILoot.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n}\\n\\ncontract Deevy is ERC721, ReentrancyGuard, Ownable, IDeevy {\\n    struct DeevySet {\\n        address set;\\n        uint256 start;\\n        uint256 end;\\n        bool exists;\\n    }\\n\\n    address public bridgeMinter;\\n    address public minter;\\n    // reference readonly copy of Loot contract in L2\\n    address public loot;\\n    uint256 public LOOT_SUPPLY = 7779;\\n\\n    // stores set information\\n    mapping(uint256 => DeevySet) public sets;\\n    // unique sets\\n    mapping(address => bool) public setAddresses;\\n    // unique set names\\n    mapping(bytes32 => bool) public setNames;\\n    // array for holding sets max mint\\n    uint256[] setsMax;\\n\\n    // EVENTS\\n\\n    event NewSet(\\n        address indexed _set,\\n        string _name,\\n        uint256 _start,\\n        uint256 _end\\n    );\\n\\n    constructor(address _minterAddress, address _bridgeMinter, address _warpedLoot)\\n        public\\n        ERC721(\\\"Deevy\\\", \\\"DEEVY\\\")\\n        Ownable()\\n    {\\n        minter = _minterAddress;\\n        bridgeMinter = _bridgeMinter;\\n        loot = _warpedLoot;\\n    }\\n\\n    function setMinter(address _newMinterAddress) external onlyOwner {\\n        minter = _newMinterAddress;\\n    }\\n\\n    function setBridgeMinter(address _bridgeMinter) external onlyOwner {\\n        bridgeMinter = _bridgeMinter;\\n    }\\n\\n    function addSet(address _set, uint256 _end) external onlyOwner {\\n        require(!setAddresses[_set], \\\"!SET_ALREADY_USED\\\");\\n        setAddresses[_set] = true;\\n        DeevySet memory newSet;\\n\\n        string memory setName = IDeevySet(_set).name();\\n        bytes32 setHash = keccak256(abi.encodePacked(setName));\\n        // first set\\n        if (setsMax.length == 0) {\\n            require(_end >= LOOT_SUPPLY, \\\"!SUPPLY_FIRST_SET\\\");\\n            newSet = DeevySet({set: _set, start: 0, end: _end, exists: true});\\n            sets[0] = newSet;\\n            setsMax.push(_end);\\n            setNames[setHash] = true;\\n\\n            emit NewSet(_set, setName, 0, _end);\\n            return;\\n        }\\n\\n        require(!setNames[setHash], \\\"!SET_NAME_EXISTS\\\");\\n\\n        // adding a new set\\n        DeevySet memory lastSet = sets[setsMax.length - 1];\\n        require(_end > lastSet.end + 1, \\\"!NEW_SET_START\\\");\\n        newSet = DeevySet({\\n            set: _set,\\n            start: lastSet.end + 1,\\n            end: _end,\\n            exists: true\\n        });\\n        setsMax.push(_end);\\n        sets[setsMax.length - 1] = newSet;\\n        setNames[setHash] = true;\\n\\n        emit NewSet(_set, setName, newSet.start, newSet.end);\\n    }\\n\\n    // exclusive claim function for loot holders\\n    function warpLoot(address account, uint256 tokenId)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        require(bridgeMinter == msg.sender, \\\"!BRIDGE_MINTER\\\");\\n        require(tokenId > 0 && tokenId < 8000, \\\"!TOKEN_ID\\\");\\n        _safeMint(account, tokenId);\\n    }\\n\\n    // one time claim\\n    function ownerClaim(uint256 tokenId)\\n        public\\n        override\\n        nonReentrant\\n        onlyOwner\\n    {\\n        require(tokenId >= 8000 && tokenId < 8999, \\\"!TOKEN_ID\\\");\\n        _safeMint(owner(), tokenId);\\n    }\\n\\n    function claim(uint256 tokenId) // address account,\\n        external override\\n        nonReentrant\\n    {\\n        // require(minter == msg.sender, \\\"!MINTER\\\");\\n        // require(tokenId >= 9000, \\\"!TOKEN_ID\\\");\\n        // require(setsMax.length > 0, \\\"SETS_REQUIRED\\\");\\n        // require(tokenId <= setsMax[setsMax.length - 1], \\\"TOKEN_ID_OUT_OF_RANGE\\\");\\n        _safeMint(msg.sender, tokenId);\\n    }\\n\\n    // view functions\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        address setProperties = getSet(tokenId);\\n        return setProperties == address(0x0) ? \\\"\\\" : IDeevySet(setProperties).tokenURI(tokenId);\\n    }\\n\\n    // based on OZ https://github.com/OpenZeppelin/openzeppelin-contracts/blob/b0cf6fbb7a70f31527f36579ad644e1cf12fdf4e/contracts/utils/Arrays.sol\\n    function findSetIndex(uint256[] memory array, uint256 element)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // return max since array is empty or above max, so this number would not exist\\n        if (array.length == 0 || element > array[array.length - 1]) {\\n            return type(uint256).max;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    function getSetInfo(uint256 tokenId) public view returns (DeevySet memory) {\\n        uint256 i = findSetIndex(setsMax, tokenId);\\n        DeevySet memory info = sets[i];\\n        return info;\\n    }\\n\\n    function getSet(uint256 tokenId) public view returns (address) {\\n        DeevySet memory info = getSetInfo(tokenId);\\n        return info.set;\\n    }\\n\\n    function name(uint256 tokenId) public view returns (string memory) {\\n        address setProperties = getSet(tokenId);\\n        return IDeevySet(setProperties).name();\\n    }\\n\\n    function symbol(uint256 tokenId) public view returns (string memory) {\\n        address setProperties = getSet(tokenId);\\n        return IDeevySet(setProperties).symbol();\\n    }\\n\\n    // Loot compatibility functions\\n    function getWeapon(uint256 tokenId) public view returns (string memory) {\\n        if (tokenId > LOOT_SUPPLY) return \\\"\\\";\\n        return ILoot(loot).getWeapon(tokenId);\\n    }\\n\\n    function getChest(uint256 tokenId) public view returns (string memory) {\\n        if (tokenId > LOOT_SUPPLY) return \\\"\\\";\\n        return ILoot(loot).getChest(tokenId);\\n    }\\n\\n    function getHead(uint256 tokenId) public view returns (string memory) {\\n        if (tokenId > LOOT_SUPPLY) return \\\"\\\";\\n        return ILoot(loot).getHead(tokenId);\\n    }\\n\\n    function getWaist(uint256 tokenId) public view returns (string memory) {\\n        if (tokenId > LOOT_SUPPLY) return \\\"\\\";\\n        return ILoot(loot).getWaist(tokenId);\\n    }\\n\\n    function getFoot(uint256 tokenId) public view returns (string memory) {\\n        if (tokenId > LOOT_SUPPLY) return \\\"\\\";\\n        return ILoot(loot).getFoot(tokenId);\\n    }\\n\\n    function getHand(uint256 tokenId) public view returns (string memory) {\\n        if (tokenId > LOOT_SUPPLY) return \\\"\\\";\\n        return ILoot(loot).getHand(tokenId);\\n    }\\n\\n    function getNeck(uint256 tokenId) public view returns (string memory) {\\n        if (tokenId > LOOT_SUPPLY) return \\\"\\\";\\n        return ILoot(loot).getNeck(tokenId);\\n    }\\n\\n    function getRing(uint256 tokenId) public view returns (string memory) {\\n        if (tokenId > LOOT_SUPPLY) return \\\"\\\";\\n        return ILoot(loot).getRing(tokenId);\\n    }\\n\\n    function lootTokenURI(uint256 tokenId) public view returns (string memory) {\\n        if (tokenId > LOOT_SUPPLY) return \\\"\\\";\\n        return ILoot(loot).tokenUri(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x66a8ee5d52c4dd500c3eda14a59fc84dbd06db2ceb93ce8114ecc915f4c537df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052611e63600f553480156200001757600080fd5b506040516200302d3803806200302d8339810160408190526200003a916200028f565b60405180604001604052806005815260200164446565767960d81b81525060405180604001604052806005815260200164444545565960d81b8152506200008e6301ffc9a760e01b6200019460201b60201c565b8151620000a3906006906020850190620001f3565b508051620000b9906007906020840190620001f3565b50620000cc6380ac58cd60e01b62000194565b620000de635b5e139f60e01b62000194565b620000f063780e9d6360e01b62000194565b50506001600a55600062000103620001ef565b600b80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600d80546001600160a01b039485166001600160a01b031991821617909155600c805493851693821693909317909255600e805491909316911617905562000332565b6001600160e01b03198082161415620001ca5760405162461bcd60e51b8152600401620001c190620002e2565b60405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b3390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023657805160ff191683800117855562000266565b8280016001018555821562000266579182015b828111156200026657825182559160200191906001019062000249565b506200027492915062000278565b5090565b5b8082111562000274576000815560010162000279565b600080600060608486031215620002a4578283fd5b8351620002b18162000319565b6020850151909350620002c48162000319565b6040850151909250620002d78162000319565b809150509250925092565b6020808252601c908201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604082015260600190565b6001600160a01b03811681146200032f57600080fd5b50565b612ceb80620003426000396000f3fe608060405234801561001057600080fd5b50600436106102895760003560e01c80636c0360eb1161015c5780639e41b73f116100ce578063d638a37111610087578063d638a37114610572578063d6b2eee814610592578063e985e9c51461059a578063ef68075a146105ad578063f2fde38b146105c0578063fca3b5aa146105d357610289565b80639e41b73f14610500578063a22cb46514610513578063b88d4fde14610526578063c08a5dd514610539578063c87b56dd1461054c578063d47f269e1461055f57610289565b80638da5cb5b116101205780638da5cb5b146104af57806395d89b41146104b75780639720c969146104bf5780639b7b2ab0146104d25780639bdc1b69146104da5780639cb88aa6146104ed57610289565b80636c0360eb146104665780636d3505b41461046e57806370a0823114610481578063715018a61461049457806381d3c4351461049c57610289565b80632f745c59116102005780634f6ccce7116101b95780634f6ccce7146103ef578063555e9f2c146104025780635b227f9b146104155780636352211e1461043857806367209aa81461044b5780636a0b09011461045e57610289565b80632f745c591461037d578063379607f51461039057806342842e0e146103a3578063434f48c4146103b657806346c04da0146103c95780634e41a1fb146103dc57610289565b8063081812fc11610252578063081812fc14610309578063095ea7b31461031c578063097da5fb1461032f5780630e99990d1461034257806318160ddd1461035557806323b872dd1461036a57610289565b8062ad800c1461028e57806301ffc9a7146102b757806302ae6625146102d757806306fdde03146102ec57806307546172146102f4575b600080fd5b6102a161029c3660046123fc565b6105e6565b6040516102ae919061258b565b60405180910390f35b6102ca6102c5366004612414565b610673565b6040516102ae9190612580565b6102ea6102e53660046123d2565b610692565b005b6102a161072d565b6102fc6107c3565b6040516102ae9190612507565b6102fc6103173660046123fc565b6107d2565b6102ea61032a3660046123d2565b610815565b6102ea61033d3660046123d2565b6108ad565b6102a16103503660046123fc565b610d50565b61035d610dfb565b6040516102ae9190612bac565b6102ea6103783660046122b2565b610e0c565b61035d61038b3660046123d2565b610e44565b6102ea61039e3660046123fc565b610e6d565b6102ea6103b13660046122b2565b610ea7565b6102ea6103c43660046123fc565b610ec2565b6102a16103d73660046123fc565b610f69565b6102a16103ea3660046123fc565b610fba565b61035d6103fd3660046123fc565b611002565b6102fc6104103660046123fc565b611018565b6104286104233660046123fc565b611033565b6040516102ae9493929190612558565b6102fc6104463660046123fc565b611067565b6102a16104593660046123fc565b61108f565b61035d6110e0565b6102a16110e6565b6102ca61047c3660046123fc565b611147565b61035d61048f366004612263565b61115c565b6102ea6111a5565b6102ca6104aa366004612263565b61122e565b6102fc611243565b6102a1611252565b6102a16104cd3660046123fc565b6112b3565b6102fc611304565b6102a16104e83660046123fc565b611313565b6102ea6104fb366004612263565b611364565b6102a161050e3660046123fc565b6113c5565b6102ea610521366004612397565b611416565b6102ea6105343660046122f2565b6114e4565b6102a16105473660046123fc565b611523565b6102a161055a3660046123fc565b611574565b6102a161056d3660046123fc565b61162d565b6105856105803660046123fc565b61167e565b6040516102ae9190612b76565b6102fc611742565b6102ca6105a836600461227e565b611751565b6102a16105bb3660046123fc565b61177f565b6102ea6105ce366004612263565b6117d0565b6102ea6105e1366004612263565b611891565b606060006105f383611018565b9050806001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561062e57600080fd5b505afa158015610642573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261066a919081019061244c565b9150505b919050565b6001600160e01b03191660009081526020819052604090205460ff1690565b6002600a5414156106be5760405162461bcd60e51b81526004016106b590612b3f565b60405180910390fd5b6002600a55600c546001600160a01b031633146106ed5760405162461bcd60e51b81526004016106b590612a8f565b6000811180156106fe5750611f4081105b61071a5760405162461bcd60e51b81526004016106b5906129e2565b61072482826118f2565b50506001600a55565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107b95780601f1061078e576101008083540402835291602001916107b9565b820191906000526020600020905b81548152906001019060200180831161079c57829003601f168201915b5050505050905090565b600d546001600160a01b031681565b60006107dd8261190c565b6107f95760405162461bcd60e51b81526004016106b590612961565b506000908152600460205260409020546001600160a01b031690565b600061082082611067565b9050806001600160a01b0316836001600160a01b031614156108545760405162461bcd60e51b81526004016106b590612a4e565b806001600160a01b0316610866611919565b6001600160a01b031614806108825750610882816105a8611919565b61089e5760405162461bcd60e51b81526004016106b590612843565b6108a8838361191d565b505050565b6108b5611919565b6001600160a01b03166108c6611243565b6001600160a01b0316146108ec5760405162461bcd60e51b81526004016106b5906129ad565b6001600160a01b03821660009081526011602052604090205460ff16156109255760405162461bcd60e51b81526004016106b5906126d4565b6001600160a01b0382166000908152601160205260409020805460ff19166001179055610950612219565b6060836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561098b57600080fd5b505afa15801561099f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109c7919081019061244c565b90506000816040516020016109dc91906124eb565b60408051601f198184030181529190528051602090910120601354909150610b9257600f54841015610a205760405162461bcd60e51b81526004016106b5906127c6565b604080516080810182526001600160a01b03808816808352600060208085018281528587018b81526001606088018181528580526010855288517f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb018054919099166001600160a01b03199091161790975591517f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb0255517f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb035593517f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb04805491151560ff19928316179055601380548087019091557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090018b90558783526012909152858220805490911690931790925592519195507f53be94575c5d85244e2b43b5331a0a40c4cff55382b167429bed0af4b8adcb8591610b82918691899061259e565b60405180910390a2505050610d4c565b60008181526012602052604090205460ff1615610bc15760405162461bcd60e51b81526004016106b5906127f1565b610bc9612219565b5060135460001901600090815260106020908152604091829020825160808101845281546001600160a01b0316815260018281015493820193909352600282015493810184905260039091015460ff161515606082015291018511610c405760405162461bcd60e51b81526004016106b59061281b565b604080516080810182526001600160a01b0380891680835284840151600190810160208086019182528587018c8152606087018481526013805480870182557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090018f905554600019016000908152601084528981208951815499166001600160a01b03199099169890981788558451888701558251600289015590516003909701805497151560ff199889161790558a81526012909252908790208054909516909217909355915191519351929750927f53be94575c5d85244e2b43b5331a0a40c4cff55382b167429bed0af4b8adcb8592610d3f928892909161259e565b60405180910390a2505050505b5050565b6060600f54821115610d71575060408051602081019091526000815261066e565b600e54604051630e99990d60e01b81526001600160a01b0390911690630e99990d90610da1908590600401612bac565b60006040518083038186803b158015610db957600080fd5b505afa158015610dcd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610df5919081019061244c565b92915050565b6000610e07600261198b565b905090565b610e1d610e17611919565b82611996565b610e395760405162461bcd60e51b81526004016106b590612ab7565b6108a8838383611a1b565b6001600160a01b0382166000908152600160205260408120610e669083611b29565b9392505050565b6002600a541415610e905760405162461bcd60e51b81526004016106b590612b3f565b6002600a55610e9f33826118f2565b506001600a55565b6108a8838383604051806020016040528060008152506114e4565b6002600a541415610ee55760405162461bcd60e51b81526004016106b590612b3f565b6002600a55610ef2611919565b6001600160a01b0316610f03611243565b6001600160a01b031614610f295760405162461bcd60e51b81526004016106b5906129ad565b611f408110158015610f3c575061232781105b610f585760405162461bcd60e51b81526004016106b5906129e2565b610e9f610f63611243565b826118f2565b6060600f54821115610f8a575060408051602081019091526000815261066e565b600e54604051631675f45560e01b81526001600160a01b0390911690631675f45590610da1908590600401612bac565b60606000610fc783611018565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561062e57600080fd5b600080611010600284611b35565b509392505050565b6000611022612219565b61102b8361167e565b519392505050565b60106020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff1684565b6000610df582604051806060016040528060298152602001612c8d6029913960029190611b51565b6060600f548211156110b0575060408051602081019091526000815261066e565b600e54604051630ce4135560e31b81526001600160a01b03909116906367209aa890610da1908590600401612bac565b600f5481565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107b95780601f1061078e576101008083540402835291602001916107b9565b60126020526000908152604090205460ff1681565b60006001600160a01b0382166111845760405162461bcd60e51b81526004016106b5906128a0565b6001600160a01b0382166000908152600160205260409020610df59061198b565b6111ad611919565b6001600160a01b03166111be611243565b6001600160a01b0316146111e45760405162461bcd60e51b81526004016106b5906129ad565b600b546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600b80546001600160a01b0319169055565b60116020526000908152604090205460ff1681565b600b546001600160a01b031690565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107b95780601f1061078e576101008083540402835291602001916107b9565b6060600f548211156112d4575060408051602081019091526000815261066e565b600e54604051639720c96960e01b81526001600160a01b0390911690639720c96990610da1908590600401612bac565b600e546001600160a01b031681565b6060600f54821115611334575060408051602081019091526000815261066e565b600e54604051639bdc1b6960e01b81526001600160a01b0390911690639bdc1b6990610da1908590600401612bac565b61136c611919565b6001600160a01b031661137d611243565b6001600160a01b0316146113a35760405162461bcd60e51b81526004016106b5906129ad565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600f548211156113e6575060408051602081019091526000815261066e565b600e54604051639e41b73f60e01b81526001600160a01b0390911690639e41b73f90610da1908590600401612bac565b61141e611919565b6001600160a01b0316826001600160a01b0316141561144f5760405162461bcd60e51b81526004016106b590612743565b806005600061145c611919565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556114a0611919565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114d89190612580565b60405180910390a35050565b6114f56114ef611919565b83611996565b6115115760405162461bcd60e51b81526004016106b590612ab7565b61151d84848484611b5e565b50505050565b6060600f54821115611544575060408051602081019091526000815261066e565b600e5460405163c08a5dd560e01b81526001600160a01b039091169063c08a5dd590610da1908590600401612bac565b6060600061158183611018565b90506001600160a01b038116156116175760405163c87b56dd60e01b81526001600160a01b0382169063c87b56dd906115be908690600401612bac565b60006040518083038186803b1580156115d657600080fd5b505afa1580156115ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611612919081019061244c565b61066a565b5050604080516020810190915260008152919050565b6060600f5482111561164e575060408051602081019091526000815261066e565b600e54604051636a3f934f60e11b81526001600160a01b039091169063d47f269e90610da1908590600401612bac565b611686612219565b60006116e260138054806020026020016040519081016040528092919081815260200182805480156116d757602002820191906000526020600020905b8154815260200190600101908083116116c3575b505050505084611b91565b90506116ec612219565b50600090815260106020908152604091829020825160808101845281546001600160a01b0316815260018201549281019290925260028101549282019290925260039091015460ff161515606082015292915050565b600c546001600160a01b031681565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6060600f548211156117a0575060408051602081019091526000815261066e565b600e546040516377b403ad60e11b81526001600160a01b039091169063ef68075a90610da1908590600401612bac565b6117d8611919565b6001600160a01b03166117e9611243565b6001600160a01b03161461180f5760405162461bcd60e51b81526004016106b5906129ad565b6001600160a01b0381166118355760405162461bcd60e51b81526004016106b590612657565b600b546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600b80546001600160a01b0319166001600160a01b0392909216919091179055565b611899611919565b6001600160a01b03166118aa611243565b6001600160a01b0316146118d05760405162461bcd60e51b81526004016106b5906129ad565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b610d4c828260405180602001604052806000815250611c51565b6000610df5600283611c84565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061195282611067565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610df582611c90565b60006119a18261190c565b6119bd5760405162461bcd60e51b81526004016106b59061277a565b60006119c883611067565b9050806001600160a01b0316846001600160a01b03161480611a035750836001600160a01b03166119f8846107d2565b6001600160a01b0316145b80611a135750611a138185611751565b949350505050565b826001600160a01b0316611a2e82611067565b6001600160a01b031614611a545760405162461bcd60e51b81526004016106b590612a05565b6001600160a01b038216611a7a5760405162461bcd60e51b81526004016106b5906126ff565b611a858383836108a8565b611a9060008261191d565b6001600160a01b0383166000908152600160205260409020611ab29082611c94565b506001600160a01b0382166000908152600160205260409020611ad59082611ca0565b50611ae260028284611cac565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610e668383611cc2565b6000808080611b448686611d07565b9097909650945050505050565b6000611a13848484611d63565b611b69848484611a1b565b611b7584848484611dc2565b61151d5760405162461bcd60e51b81526004016106b590612605565b6000825160001480611bb9575082600184510381518110611bae57fe5b602002602001015182115b15611bc75750600019610df5565b82516000905b80821015611c13576000611be18383611ea1565b905084868281518110611bf057fe5b60200260200101511115611c0657809150611c0d565b8060010192505b50611bcd565b600082118015611c38575083856001840381518110611c2e57fe5b6020026020010151145b15611c495750600019019050610df5565b509050610df5565b611c5b8383611ead565b611c686000848484611dc2565b6108a85760405162461bcd60e51b81526004016106b590612605565b6000610e668383611f71565b5490565b6000610e668383611f89565b6000610e66838361204f565b6000611a1384846001600160a01b038516612099565b81546000908210611ce55760405162461bcd60e51b81526004016106b5906125c3565b826000018281548110611cf457fe5b9060005260206000200154905092915050565b815460009081908310611d2c5760405162461bcd60e51b81526004016106b5906128ea565b6000846000018481548110611d3d57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008281526001840160205260408120548281611d935760405162461bcd60e51b81526004016106b5919061258b565b50846000016001820381548110611da657fe5b9060005260206000209060020201600101549150509392505050565b6000611dd6846001600160a01b0316612130565b611de257506001611a13565b6060611e6a630a85bd0160e11b611df7611919565b888787604051602401611e0d949392919061251b565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001612c5b603291396001600160a01b0388169190612136565b9050600081806020019051810190611e829190612430565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b60028282180491160190565b6001600160a01b038216611ed35760405162461bcd60e51b81526004016106b59061292c565b611edc8161190c565b15611ef95760405162461bcd60e51b81526004016106b59061269d565b611f05600083836108a8565b6001600160a01b0382166000908152600160205260409020611f279082611ca0565b50611f3460028284611cac565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60009081526001919091016020526040902054151590565b600081815260018301602052604081205480156120455783546000198083019190810190600090879083908110611fbc57fe5b9060005260206000200154905080876000018481548110611fd957fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061200957fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610df5565b6000915050610df5565b600061205b8383611f71565b61209157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610df5565b506000610df5565b6000828152600184016020526040812054806120fe575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055610e66565b8285600001600183038154811061211157fe5b9060005260206000209060020201600101819055506000915050610e66565b3b151590565b6060611a1384846000858561214a85612130565b6121665760405162461bcd60e51b81526004016106b590612b08565b60006060866001600160a01b0316858760405161218391906124eb565b60006040518083038185875af1925050503d80600081146121c0576040519150601f19603f3d011682016040523d82523d6000602084013e6121c5565b606091505b50915091506121d58282866121e0565b979650505050505050565b606083156121ef575081610e66565b8251156121ff5782518084602001fd5b8160405162461bcd60e51b81526004016106b5919061258b565b604051806080016040528060006001600160a01b0316815260200160008152602001600081526020016000151581525090565b80356001600160a01b0381168114610df557600080fd5b600060208284031215612274578081fd5b610e66838361224c565b60008060408385031215612290578081fd5b61229a848461224c565b91506122a9846020850161224c565b90509250929050565b6000806000606084860312156122c6578081fd5b83356122d181612c2c565b925060208401356122e181612c2c565b929592945050506040919091013590565b60008060008060808587031215612307578081fd5b612311868661224c565b9350612320866020870161224c565b925060408501359150606085013567ffffffffffffffff811115612342578182fd5b8501601f81018713612352578182fd5b803561236561236082612bdc565b612bb5565b818152886020838501011115612379578384fd5b81602084016020830137908101602001929092525092959194509250565b600080604083850312156123a9578182fd5b6123b3848461224c565b9150602083013580151581146123c7578182fd5b809150509250929050565b600080604083850312156123e4578182fd5b6123ee848461224c565b946020939093013593505050565b60006020828403121561240d578081fd5b5035919050565b600060208284031215612425578081fd5b8135610e6681612c44565b600060208284031215612441578081fd5b8151610e6681612c44565b60006020828403121561245d578081fd5b815167ffffffffffffffff811115612473578182fd5b8201601f81018413612483578182fd5b805161249161236082612bdc565b8181528560208385010111156124a5578384fd5b6124b6826020830160208601612c00565b95945050505050565b600081518084526124d7816020860160208601612c00565b601f01601f19169290920160200192915050565b600082516124fd818460208701612c00565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061254e908301846124bf565b9695505050505050565b6001600160a01b03949094168452602084019290925260408301521515606082015260800190565b901515815260200190565b600060208252610e6660208301846124bf565b6000606082526125b160608301866124bf565b60208301949094525060400152919050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252601190820152700854d15517d053149150511657d554d151607a1b604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252601190820152700854d55414131657d1925494d517d4d155607a1b604082015260600190565b60208082526010908201526f215345545f4e414d455f45584953545360801b604082015260600190565b6020808252600e908201526d08539155d7d4d15517d4d510549560921b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526022908201527f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260099082015268085513d2d15397d25160ba1b604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252600e908201526d10a12924a223a2afa6a4a72a22a960911b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b81516001600160a01b03168152602080830151908201526040808301519082015260609182015115159181019190915260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715612bd457600080fd5b604052919050565b600067ffffffffffffffff821115612bf2578081fd5b50601f01601f191660200190565b60005b83811015612c1b578181015183820152602001612c03565b8381111561151d5750506000910152565b6001600160a01b0381168114612c4157600080fd5b50565b6001600160e01b031981168114612c4157600080fdfe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656ea26469706673582212201cd7c092bf0a2b2fbc6e874c058fbbd7f019f737b199274974764377bde0040f64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102895760003560e01c80636c0360eb1161015c5780639e41b73f116100ce578063d638a37111610087578063d638a37114610572578063d6b2eee814610592578063e985e9c51461059a578063ef68075a146105ad578063f2fde38b146105c0578063fca3b5aa146105d357610289565b80639e41b73f14610500578063a22cb46514610513578063b88d4fde14610526578063c08a5dd514610539578063c87b56dd1461054c578063d47f269e1461055f57610289565b80638da5cb5b116101205780638da5cb5b146104af57806395d89b41146104b75780639720c969146104bf5780639b7b2ab0146104d25780639bdc1b69146104da5780639cb88aa6146104ed57610289565b80636c0360eb146104665780636d3505b41461046e57806370a0823114610481578063715018a61461049457806381d3c4351461049c57610289565b80632f745c59116102005780634f6ccce7116101b95780634f6ccce7146103ef578063555e9f2c146104025780635b227f9b146104155780636352211e1461043857806367209aa81461044b5780636a0b09011461045e57610289565b80632f745c591461037d578063379607f51461039057806342842e0e146103a3578063434f48c4146103b657806346c04da0146103c95780634e41a1fb146103dc57610289565b8063081812fc11610252578063081812fc14610309578063095ea7b31461031c578063097da5fb1461032f5780630e99990d1461034257806318160ddd1461035557806323b872dd1461036a57610289565b8062ad800c1461028e57806301ffc9a7146102b757806302ae6625146102d757806306fdde03146102ec57806307546172146102f4575b600080fd5b6102a161029c3660046123fc565b6105e6565b6040516102ae919061258b565b60405180910390f35b6102ca6102c5366004612414565b610673565b6040516102ae9190612580565b6102ea6102e53660046123d2565b610692565b005b6102a161072d565b6102fc6107c3565b6040516102ae9190612507565b6102fc6103173660046123fc565b6107d2565b6102ea61032a3660046123d2565b610815565b6102ea61033d3660046123d2565b6108ad565b6102a16103503660046123fc565b610d50565b61035d610dfb565b6040516102ae9190612bac565b6102ea6103783660046122b2565b610e0c565b61035d61038b3660046123d2565b610e44565b6102ea61039e3660046123fc565b610e6d565b6102ea6103b13660046122b2565b610ea7565b6102ea6103c43660046123fc565b610ec2565b6102a16103d73660046123fc565b610f69565b6102a16103ea3660046123fc565b610fba565b61035d6103fd3660046123fc565b611002565b6102fc6104103660046123fc565b611018565b6104286104233660046123fc565b611033565b6040516102ae9493929190612558565b6102fc6104463660046123fc565b611067565b6102a16104593660046123fc565b61108f565b61035d6110e0565b6102a16110e6565b6102ca61047c3660046123fc565b611147565b61035d61048f366004612263565b61115c565b6102ea6111a5565b6102ca6104aa366004612263565b61122e565b6102fc611243565b6102a1611252565b6102a16104cd3660046123fc565b6112b3565b6102fc611304565b6102a16104e83660046123fc565b611313565b6102ea6104fb366004612263565b611364565b6102a161050e3660046123fc565b6113c5565b6102ea610521366004612397565b611416565b6102ea6105343660046122f2565b6114e4565b6102a16105473660046123fc565b611523565b6102a161055a3660046123fc565b611574565b6102a161056d3660046123fc565b61162d565b6105856105803660046123fc565b61167e565b6040516102ae9190612b76565b6102fc611742565b6102ca6105a836600461227e565b611751565b6102a16105bb3660046123fc565b61177f565b6102ea6105ce366004612263565b6117d0565b6102ea6105e1366004612263565b611891565b606060006105f383611018565b9050806001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561062e57600080fd5b505afa158015610642573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261066a919081019061244c565b9150505b919050565b6001600160e01b03191660009081526020819052604090205460ff1690565b6002600a5414156106be5760405162461bcd60e51b81526004016106b590612b3f565b60405180910390fd5b6002600a55600c546001600160a01b031633146106ed5760405162461bcd60e51b81526004016106b590612a8f565b6000811180156106fe5750611f4081105b61071a5760405162461bcd60e51b81526004016106b5906129e2565b61072482826118f2565b50506001600a55565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107b95780601f1061078e576101008083540402835291602001916107b9565b820191906000526020600020905b81548152906001019060200180831161079c57829003601f168201915b5050505050905090565b600d546001600160a01b031681565b60006107dd8261190c565b6107f95760405162461bcd60e51b81526004016106b590612961565b506000908152600460205260409020546001600160a01b031690565b600061082082611067565b9050806001600160a01b0316836001600160a01b031614156108545760405162461bcd60e51b81526004016106b590612a4e565b806001600160a01b0316610866611919565b6001600160a01b031614806108825750610882816105a8611919565b61089e5760405162461bcd60e51b81526004016106b590612843565b6108a8838361191d565b505050565b6108b5611919565b6001600160a01b03166108c6611243565b6001600160a01b0316146108ec5760405162461bcd60e51b81526004016106b5906129ad565b6001600160a01b03821660009081526011602052604090205460ff16156109255760405162461bcd60e51b81526004016106b5906126d4565b6001600160a01b0382166000908152601160205260409020805460ff19166001179055610950612219565b6060836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561098b57600080fd5b505afa15801561099f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109c7919081019061244c565b90506000816040516020016109dc91906124eb565b60408051601f198184030181529190528051602090910120601354909150610b9257600f54841015610a205760405162461bcd60e51b81526004016106b5906127c6565b604080516080810182526001600160a01b03808816808352600060208085018281528587018b81526001606088018181528580526010855288517f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb018054919099166001600160a01b03199091161790975591517f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb0255517f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb035593517f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb04805491151560ff19928316179055601380548087019091557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090018b90558783526012909152858220805490911690931790925592519195507f53be94575c5d85244e2b43b5331a0a40c4cff55382b167429bed0af4b8adcb8591610b82918691899061259e565b60405180910390a2505050610d4c565b60008181526012602052604090205460ff1615610bc15760405162461bcd60e51b81526004016106b5906127f1565b610bc9612219565b5060135460001901600090815260106020908152604091829020825160808101845281546001600160a01b0316815260018281015493820193909352600282015493810184905260039091015460ff161515606082015291018511610c405760405162461bcd60e51b81526004016106b59061281b565b604080516080810182526001600160a01b0380891680835284840151600190810160208086019182528587018c8152606087018481526013805480870182557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090018f905554600019016000908152601084528981208951815499166001600160a01b03199099169890981788558451888701558251600289015590516003909701805497151560ff199889161790558a81526012909252908790208054909516909217909355915191519351929750927f53be94575c5d85244e2b43b5331a0a40c4cff55382b167429bed0af4b8adcb8592610d3f928892909161259e565b60405180910390a2505050505b5050565b6060600f54821115610d71575060408051602081019091526000815261066e565b600e54604051630e99990d60e01b81526001600160a01b0390911690630e99990d90610da1908590600401612bac565b60006040518083038186803b158015610db957600080fd5b505afa158015610dcd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610df5919081019061244c565b92915050565b6000610e07600261198b565b905090565b610e1d610e17611919565b82611996565b610e395760405162461bcd60e51b81526004016106b590612ab7565b6108a8838383611a1b565b6001600160a01b0382166000908152600160205260408120610e669083611b29565b9392505050565b6002600a541415610e905760405162461bcd60e51b81526004016106b590612b3f565b6002600a55610e9f33826118f2565b506001600a55565b6108a8838383604051806020016040528060008152506114e4565b6002600a541415610ee55760405162461bcd60e51b81526004016106b590612b3f565b6002600a55610ef2611919565b6001600160a01b0316610f03611243565b6001600160a01b031614610f295760405162461bcd60e51b81526004016106b5906129ad565b611f408110158015610f3c575061232781105b610f585760405162461bcd60e51b81526004016106b5906129e2565b610e9f610f63611243565b826118f2565b6060600f54821115610f8a575060408051602081019091526000815261066e565b600e54604051631675f45560e01b81526001600160a01b0390911690631675f45590610da1908590600401612bac565b60606000610fc783611018565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561062e57600080fd5b600080611010600284611b35565b509392505050565b6000611022612219565b61102b8361167e565b519392505050565b60106020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff1684565b6000610df582604051806060016040528060298152602001612c8d6029913960029190611b51565b6060600f548211156110b0575060408051602081019091526000815261066e565b600e54604051630ce4135560e31b81526001600160a01b03909116906367209aa890610da1908590600401612bac565b600f5481565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107b95780601f1061078e576101008083540402835291602001916107b9565b60126020526000908152604090205460ff1681565b60006001600160a01b0382166111845760405162461bcd60e51b81526004016106b5906128a0565b6001600160a01b0382166000908152600160205260409020610df59061198b565b6111ad611919565b6001600160a01b03166111be611243565b6001600160a01b0316146111e45760405162461bcd60e51b81526004016106b5906129ad565b600b546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600b80546001600160a01b0319169055565b60116020526000908152604090205460ff1681565b600b546001600160a01b031690565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107b95780601f1061078e576101008083540402835291602001916107b9565b6060600f548211156112d4575060408051602081019091526000815261066e565b600e54604051639720c96960e01b81526001600160a01b0390911690639720c96990610da1908590600401612bac565b600e546001600160a01b031681565b6060600f54821115611334575060408051602081019091526000815261066e565b600e54604051639bdc1b6960e01b81526001600160a01b0390911690639bdc1b6990610da1908590600401612bac565b61136c611919565b6001600160a01b031661137d611243565b6001600160a01b0316146113a35760405162461bcd60e51b81526004016106b5906129ad565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600f548211156113e6575060408051602081019091526000815261066e565b600e54604051639e41b73f60e01b81526001600160a01b0390911690639e41b73f90610da1908590600401612bac565b61141e611919565b6001600160a01b0316826001600160a01b0316141561144f5760405162461bcd60e51b81526004016106b590612743565b806005600061145c611919565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556114a0611919565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114d89190612580565b60405180910390a35050565b6114f56114ef611919565b83611996565b6115115760405162461bcd60e51b81526004016106b590612ab7565b61151d84848484611b5e565b50505050565b6060600f54821115611544575060408051602081019091526000815261066e565b600e5460405163c08a5dd560e01b81526001600160a01b039091169063c08a5dd590610da1908590600401612bac565b6060600061158183611018565b90506001600160a01b038116156116175760405163c87b56dd60e01b81526001600160a01b0382169063c87b56dd906115be908690600401612bac565b60006040518083038186803b1580156115d657600080fd5b505afa1580156115ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611612919081019061244c565b61066a565b5050604080516020810190915260008152919050565b6060600f5482111561164e575060408051602081019091526000815261066e565b600e54604051636a3f934f60e11b81526001600160a01b039091169063d47f269e90610da1908590600401612bac565b611686612219565b60006116e260138054806020026020016040519081016040528092919081815260200182805480156116d757602002820191906000526020600020905b8154815260200190600101908083116116c3575b505050505084611b91565b90506116ec612219565b50600090815260106020908152604091829020825160808101845281546001600160a01b0316815260018201549281019290925260028101549282019290925260039091015460ff161515606082015292915050565b600c546001600160a01b031681565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6060600f548211156117a0575060408051602081019091526000815261066e565b600e546040516377b403ad60e11b81526001600160a01b039091169063ef68075a90610da1908590600401612bac565b6117d8611919565b6001600160a01b03166117e9611243565b6001600160a01b03161461180f5760405162461bcd60e51b81526004016106b5906129ad565b6001600160a01b0381166118355760405162461bcd60e51b81526004016106b590612657565b600b546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600b80546001600160a01b0319166001600160a01b0392909216919091179055565b611899611919565b6001600160a01b03166118aa611243565b6001600160a01b0316146118d05760405162461bcd60e51b81526004016106b5906129ad565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b610d4c828260405180602001604052806000815250611c51565b6000610df5600283611c84565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061195282611067565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610df582611c90565b60006119a18261190c565b6119bd5760405162461bcd60e51b81526004016106b59061277a565b60006119c883611067565b9050806001600160a01b0316846001600160a01b03161480611a035750836001600160a01b03166119f8846107d2565b6001600160a01b0316145b80611a135750611a138185611751565b949350505050565b826001600160a01b0316611a2e82611067565b6001600160a01b031614611a545760405162461bcd60e51b81526004016106b590612a05565b6001600160a01b038216611a7a5760405162461bcd60e51b81526004016106b5906126ff565b611a858383836108a8565b611a9060008261191d565b6001600160a01b0383166000908152600160205260409020611ab29082611c94565b506001600160a01b0382166000908152600160205260409020611ad59082611ca0565b50611ae260028284611cac565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610e668383611cc2565b6000808080611b448686611d07565b9097909650945050505050565b6000611a13848484611d63565b611b69848484611a1b565b611b7584848484611dc2565b61151d5760405162461bcd60e51b81526004016106b590612605565b6000825160001480611bb9575082600184510381518110611bae57fe5b602002602001015182115b15611bc75750600019610df5565b82516000905b80821015611c13576000611be18383611ea1565b905084868281518110611bf057fe5b60200260200101511115611c0657809150611c0d565b8060010192505b50611bcd565b600082118015611c38575083856001840381518110611c2e57fe5b6020026020010151145b15611c495750600019019050610df5565b509050610df5565b611c5b8383611ead565b611c686000848484611dc2565b6108a85760405162461bcd60e51b81526004016106b590612605565b6000610e668383611f71565b5490565b6000610e668383611f89565b6000610e66838361204f565b6000611a1384846001600160a01b038516612099565b81546000908210611ce55760405162461bcd60e51b81526004016106b5906125c3565b826000018281548110611cf457fe5b9060005260206000200154905092915050565b815460009081908310611d2c5760405162461bcd60e51b81526004016106b5906128ea565b6000846000018481548110611d3d57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008281526001840160205260408120548281611d935760405162461bcd60e51b81526004016106b5919061258b565b50846000016001820381548110611da657fe5b9060005260206000209060020201600101549150509392505050565b6000611dd6846001600160a01b0316612130565b611de257506001611a13565b6060611e6a630a85bd0160e11b611df7611919565b888787604051602401611e0d949392919061251b565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001612c5b603291396001600160a01b0388169190612136565b9050600081806020019051810190611e829190612430565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b60028282180491160190565b6001600160a01b038216611ed35760405162461bcd60e51b81526004016106b59061292c565b611edc8161190c565b15611ef95760405162461bcd60e51b81526004016106b59061269d565b611f05600083836108a8565b6001600160a01b0382166000908152600160205260409020611f279082611ca0565b50611f3460028284611cac565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60009081526001919091016020526040902054151590565b600081815260018301602052604081205480156120455783546000198083019190810190600090879083908110611fbc57fe5b9060005260206000200154905080876000018481548110611fd957fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061200957fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610df5565b6000915050610df5565b600061205b8383611f71565b61209157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610df5565b506000610df5565b6000828152600184016020526040812054806120fe575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055610e66565b8285600001600183038154811061211157fe5b9060005260206000209060020201600101819055506000915050610e66565b3b151590565b6060611a1384846000858561214a85612130565b6121665760405162461bcd60e51b81526004016106b590612b08565b60006060866001600160a01b0316858760405161218391906124eb565b60006040518083038185875af1925050503d80600081146121c0576040519150601f19603f3d011682016040523d82523d6000602084013e6121c5565b606091505b50915091506121d58282866121e0565b979650505050505050565b606083156121ef575081610e66565b8251156121ff5782518084602001fd5b8160405162461bcd60e51b81526004016106b5919061258b565b604051806080016040528060006001600160a01b0316815260200160008152602001600081526020016000151581525090565b80356001600160a01b0381168114610df557600080fd5b600060208284031215612274578081fd5b610e66838361224c565b60008060408385031215612290578081fd5b61229a848461224c565b91506122a9846020850161224c565b90509250929050565b6000806000606084860312156122c6578081fd5b83356122d181612c2c565b925060208401356122e181612c2c565b929592945050506040919091013590565b60008060008060808587031215612307578081fd5b612311868661224c565b9350612320866020870161224c565b925060408501359150606085013567ffffffffffffffff811115612342578182fd5b8501601f81018713612352578182fd5b803561236561236082612bdc565b612bb5565b818152886020838501011115612379578384fd5b81602084016020830137908101602001929092525092959194509250565b600080604083850312156123a9578182fd5b6123b3848461224c565b9150602083013580151581146123c7578182fd5b809150509250929050565b600080604083850312156123e4578182fd5b6123ee848461224c565b946020939093013593505050565b60006020828403121561240d578081fd5b5035919050565b600060208284031215612425578081fd5b8135610e6681612c44565b600060208284031215612441578081fd5b8151610e6681612c44565b60006020828403121561245d578081fd5b815167ffffffffffffffff811115612473578182fd5b8201601f81018413612483578182fd5b805161249161236082612bdc565b8181528560208385010111156124a5578384fd5b6124b6826020830160208601612c00565b95945050505050565b600081518084526124d7816020860160208601612c00565b601f01601f19169290920160200192915050565b600082516124fd818460208701612c00565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061254e908301846124bf565b9695505050505050565b6001600160a01b03949094168452602084019290925260408301521515606082015260800190565b901515815260200190565b600060208252610e6660208301846124bf565b6000606082526125b160608301866124bf565b60208301949094525060400152919050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252601190820152700854d15517d053149150511657d554d151607a1b604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252601190820152700854d55414131657d1925494d517d4d155607a1b604082015260600190565b60208082526010908201526f215345545f4e414d455f45584953545360801b604082015260600190565b6020808252600e908201526d08539155d7d4d15517d4d510549560921b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526022908201527f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260099082015268085513d2d15397d25160ba1b604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252600e908201526d10a12924a223a2afa6a4a72a22a960911b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b81516001600160a01b03168152602080830151908201526040808301519082015260609182015115159181019190915260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715612bd457600080fd5b604052919050565b600067ffffffffffffffff821115612bf2578081fd5b50601f01601f191660200190565b60005b83811015612c1b578181015183820152602001612c03565b8381111561151d5750506000910152565b6001600160a01b0381168114612c4157600080fd5b50565b6001600160e01b031981168114612c4157600080fdfe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656ea26469706673582212201cd7c092bf0a2b2fbc6e874c058fbbd7f019f737b199274974764377bde0040f64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1944,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 2308,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "_holderTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UintSet)1188_storage)"
      },
      {
        "astId": 2310,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "_tokenOwners",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(UintToAddressMap)566_storage"
      },
      {
        "astId": 2314,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2320,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2322,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "_name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 2324,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "_symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 2328,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2330,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "_baseURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 3203,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "_status",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2065,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 3278,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "bridgeMinter",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 3280,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "minter",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 3282,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "loot",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 3285,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "LOOT_SUPPLY",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3289,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "sets",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(DeevySet)3276_storage)"
      },
      {
        "astId": 3293,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "setAddresses",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3297,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "setNames",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 3300,
        "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
        "label": "setsMax",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(MapEntry)240_storage)dyn_storage": {
        "base": "t_struct(MapEntry)240_storage",
        "encoding": "dynamic_array",
        "label": "struct EnumerableMap.MapEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(UintSet)1188_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)1188_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(DeevySet)3276_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Deevy.DeevySet)",
        "numberOfBytes": "32",
        "value": "t_struct(DeevySet)3276_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DeevySet)3276_storage": {
        "encoding": "inplace",
        "label": "struct Deevy.DeevySet",
        "members": [
          {
            "astId": 3269,
            "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
            "label": "set",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3271,
            "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
            "label": "start",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3273,
            "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
            "label": "end",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3275,
            "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
            "label": "exists",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Map)248_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 243,
            "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
            "label": "_entries",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(MapEntry)240_storage)dyn_storage"
          },
          {
            "astId": 247,
            "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MapEntry)240_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.MapEntry",
        "members": [
          {
            "astId": 237,
            "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 239,
            "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
            "label": "_value",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)802_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 797,
            "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 801,
            "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)1188_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 1187,
            "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)802_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToAddressMap)566_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToAddressMap",
        "members": [
          {
            "astId": 565,
            "contract": "src/external/solc_0.6.12/Deevy.sol:Deevy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)248_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}