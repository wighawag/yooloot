{
  "address": "0x444e4c6e2778a899c60f97876bdc179d19d444ef",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILootXP",
          "name": "lootXP",
          "type": "address"
        },
        {
          "internalType": "address[3]",
          "name": "authorizedLoots",
          "type": "address[3]"
        },
        {
          "internalType": "contract ILoot",
          "name": "loot",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "winnerGetLoot",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "commit3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "reveal3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "winner3HPeriod",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newYooLoot",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorizedAsXPSource",
          "type": "bool"
        }
      ],
      "name": "Cloned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        }
      ],
      "name": "LootDeckCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[8]",
          "name": "deck",
          "type": "uint8[8]"
        }
      ],
      "name": "LootDeckRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "deckHash",
          "type": "bytes32"
        }
      ],
      "name": "LootDeckSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "xpGaimed",
          "type": "uint256"
        }
      ],
      "name": "LootWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "loot",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "winnerGetLoot",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "commit3HPeriod",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "reveal3HPeriod",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "winner3HPeriod",
          "type": "uint8"
        }
      ],
      "name": "NewGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerPastOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        }
      ],
      "name": "WinnerWithdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oldLootId",
          "type": "uint256"
        }
      ],
      "name": "cancelDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oldLootId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "deckHash",
          "type": "bytes32"
        }
      ],
      "name": "changeDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "claimVictoryERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lootToPick",
          "type": "uint256"
        }
      ],
      "name": "claimVictoryLoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILoot",
          "name": "loot",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "winnerGetLoot",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "commit3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "reveal3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "winner3HPeriod",
          "type": "uint8"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "deckHash",
          "type": "bytes32"
        }
      ],
      "name": "commitLootDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deckHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILoot",
          "name": "loot",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "winnerGetLoot",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "commit3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "reveal3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "winner3HPeriod",
          "type": "uint8"
        }
      ],
      "name": "freeFormClone",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILoot",
          "name": "loot",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "winnerGetLoot",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "commit3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "reveal3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "winner3HPeriod",
          "type": "uint8"
        }
      ],
      "name": "freeFormInit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        },
        {
          "internalType": "uint8[8]",
          "name": "deckWithStartIndex1",
          "type": "uint8[8]"
        },
        {
          "internalType": "bool",
          "name": "lootForEveryone",
          "type": "bool"
        }
      ],
      "name": "getDeckPower",
      "outputs": [
        {
          "internalType": "uint8[8]",
          "name": "deckPower",
          "type": "uint8[8]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "uint8[8]",
              "name": "deckPower",
              "type": "uint8[8]"
            }
          ],
          "internalType": "struct YooLoot.TokenData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "getTokenDataOfOwner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "uint8[8]",
              "name": "deckPower",
              "type": "uint8[8]"
            }
          ],
          "internalType": "struct YooLoot.TokenData[]",
          "name": "tokens",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        }
      ],
      "name": "individualScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILoot",
          "name": "loot",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "winnerGetLoot",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "commit3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "reveal3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "winner3HPeriod",
          "type": "uint8"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parameters",
      "outputs": [
        {
          "internalType": "contract ILoot",
          "name": "loot",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "startTime",
          "type": "uint40"
        },
        {
          "internalType": "uint8",
          "name": "commit3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "reveal3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "winner3HPeriod",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "winnerGetLoot",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        },
        {
          "internalType": "uint8[8]",
          "name": "deckWithStartIndex1",
          "type": "uint8[8]"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "revealLootDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winner",
      "outputs": [
        {
          "internalType": "address",
          "name": "winnerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "winnerLootId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "winnerScore",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lootId",
          "type": "uint256"
        }
      ],
      "name": "withdrawAndGetXP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaaa8439c89554f3d77154894e66c84ac8d020c8d8d02f31e195bea66af4950c1",
  "receipt": {
    "to": null,
    "from": "0x61c461ecc993aadeb7e4b47e96d1b8cc37314b20",
    "contractAddress": "0x444e4c6e2778a899c60f97876bdc179d19d444ef",
    "transactionIndex": "0x4",
    "gasUsed": "0x385c13",
    "logsBloom": "0x
    "blockHash": "0x4a1b4097cd89b24bbbe429204f96e1a4ff1944fb6010d68332b2edd4a5f63421",
    "transactionHash": "0xc761fc34ebfcdf3848e031ad4373f4d9d3d29f989d03a318b8aae5b47bff7e36",
    "logs": [
      {
        "address": "0x444e4c6e2778a899c60f97876bdc179d19d444ef",
        "topics": [
          "0x89cc24effe0068a54496332a43194981e7c87f57abf57a356dee3b2ca6e1323e",
          "0x000000000000000000000000a88001dc4144af60b24e97a73bb7a8cfe908e59c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000008",
        "blockNumber": "0x53cc6e",
        "transactionHash": "0xc761fc34ebfcdf3848e031ad4373f4d9d3d29f989d03a318b8aae5b47bff7e36",
        "transactionIndex": "0x4",
        "blockHash": "0x4a1b4097cd89b24bbbe429204f96e1a4ff1944fb6010d68332b2edd4a5f63421",
        "logIndex": "0x3",
        "removed": false
      }
    ],
    "blockNumber": "0x53cc6e",
    "cumulativeGasUsed": "0x3eda52",
    "status": "0x1"
  },
  "args": [
    "0x342be942bf23108B70c6565ed51CfFa21D8954A1",
    [
      "0xA88001Dc4144af60B24e97A73bb7A8cfE908E59c",
      "0x0fa806c8d24582BE5CE60E016C00A43a0f28A2eA",
      "0xF6CD445F9F847C205859A11De337c10e4d03C766"
    ],
    "0xA88001Dc4144af60B24e97A73bb7A8cfE908E59c",
    true,
    56,
    24,
    8
  ],
  "solcInputHash": "e66083249457aba9056abfa066ba8e0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILootXP\",\"name\":\"lootXP\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"authorizedLoots\",\"type\":\"address[3]\"},{\"internalType\":\"contract ILoot\",\"name\":\"loot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"winnerGetLoot\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"commit3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reveal3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"winner3HPeriod\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newYooLoot\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorizedAsXPSource\",\"type\":\"bool\"}],\"name\":\"Cloned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"}],\"name\":\"LootDeckCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[8]\",\"name\":\"deck\",\"type\":\"uint8[8]\"}],\"name\":\"LootDeckRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deckHash\",\"type\":\"bytes32\"}],\"name\":\"LootDeckSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xpGaimed\",\"type\":\"uint256\"}],\"name\":\"LootWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loot\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"winnerGetLoot\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"commit3HPeriod\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"reveal3HPeriod\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"winner3HPeriod\",\"type\":\"uint8\"}],\"name\":\"NewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerPastOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"}],\"name\":\"WinnerWithdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldLootId\",\"type\":\"uint256\"}],\"name\":\"cancelDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldLootId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"deckHash\",\"type\":\"bytes32\"}],\"name\":\"changeDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimVictoryERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootToPick\",\"type\":\"uint256\"}],\"name\":\"claimVictoryLoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoot\",\"name\":\"loot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"winnerGetLoot\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"commit3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reveal3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"winner3HPeriod\",\"type\":\"uint8\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"deckHash\",\"type\":\"bytes32\"}],\"name\":\"commitLootDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deckHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoot\",\"name\":\"loot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"winnerGetLoot\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"commit3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reveal3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"winner3HPeriod\",\"type\":\"uint8\"}],\"name\":\"freeFormClone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoot\",\"name\":\"loot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"winnerGetLoot\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"commit3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reveal3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"winner3HPeriod\",\"type\":\"uint8\"}],\"name\":\"freeFormInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[8]\",\"name\":\"deckWithStartIndex1\",\"type\":\"uint8[8]\"},{\"internalType\":\"bool\",\"name\":\"lootForEveryone\",\"type\":\"bool\"}],\"name\":\"getDeckPower\",\"outputs\":[{\"internalType\":\"uint8[8]\",\"name\":\"deckPower\",\"type\":\"uint8[8]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint8[8]\",\"name\":\"deckPower\",\"type\":\"uint8[8]\"}],\"internalType\":\"struct YooLoot.TokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"getTokenDataOfOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint8[8]\",\"name\":\"deckPower\",\"type\":\"uint8[8]\"}],\"internalType\":\"struct YooLoot.TokenData[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"}],\"name\":\"individualScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoot\",\"name\":\"loot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"winnerGetLoot\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"commit3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reveal3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"winner3HPeriod\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parameters\",\"outputs\":[{\"internalType\":\"contract ILoot\",\"name\":\"loot\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"},{\"internalType\":\"uint8\",\"name\":\"commit3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reveal3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"winner3HPeriod\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"winnerGetLoot\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[8]\",\"name\":\"deckWithStartIndex1\",\"type\":\"uint8[8]\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"revealLootDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winnerLootId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerScore\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"}],\"name\":\"withdrawAndGetXP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTokenDataOfOwner(address,uint256,uint256)\":{\"notice\":\"get all info in the minimum calls\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/YooLoot.sol\":\"YooLoot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/YooLoot.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.7;\\n\\nimport \\\"./interfaces/ILoot.sol\\\";\\nimport \\\"./interfaces/ILootXP.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract YooLoot {\\n    event LootDeckSubmitted(address indexed player, uint256 indexed lootId, bytes32 deckHash);\\n    event LootDeckCanceled(address indexed player, uint256 indexed lootId);\\n\\n    event LootDeckRevealed(uint256 indexed lootId, uint8[8] deck);\\n\\n    event WinnerWithdrawal(address indexed winner, address indexed playerPastOwner, uint256 indexed lootId);\\n    event LootWithdrawn(address indexed player, uint256 indexed lootId, uint256 xpGaimed);\\n\\n    event NewGame(address indexed loot, bool winnerGetLoot, uint8 commit3HPeriod, uint8 reveal3HPeriod, uint8 winner3HPeriod);\\n\\n    event Cloned(address newYooLoot, bool authorizedAsXPSource);\\n\\n    struct Parameters {\\n        ILoot loot;\\n        uint40 startTime;\\n        uint8 commit3HPeriod;\\n        uint8 reveal3HPeriod;\\n        uint8 winner3HPeriod;\\n        bool winnerGetLoot;\\n    }\\n\\n    struct TokenData {\\n        uint256 id;\\n        string tokenURI;\\n        uint8[8] deckPower;\\n    }\\n\\n    mapping(uint256 => address) public deposits;\\n    Parameters public parameters;\\n    mapping(uint256 => bytes32) public deckHashes;\\n    mapping(uint8 => mapping(uint8 => uint256)) public rounds;\\n\\n\\n    address private immutable _originalLoot;\\n    address private immutable _mloot;\\n    address private immutable _lootForEveryone;\\n\\n    ILootXP private immutable _lootXP;\\n\\n    constructor(\\n        ILootXP lootXP,\\n        address[3] memory authorizedLoots,\\n        ILoot loot,\\n        bool winnerGetLoot,\\n        uint8 commit3HPeriod,\\n        uint8 reveal3HPeriod,\\n        uint8 winner3HPeriod\\n    ) {\\n        _lootXP = lootXP;\\n        _originalLoot = authorizedLoots[0];\\n        _mloot = authorizedLoots[1];\\n        _lootForEveryone = authorizedLoots[2];\\n        _init(loot, winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod);\\n    }\\n\\n    function _init(\\n        ILoot loot,\\n        bool winnerGetLoot,\\n        uint8 commit3HPeriod,\\n        uint8 reveal3HPeriod,\\n        uint8 winner3HPeriod\\n    ) internal {\\n        require(parameters.startTime == 0, \\\"ALREADY_INITIALISED\\\");\\n        require(commit3HPeriod >= 2, \\\"COMMIT_PERIOD_TOO_SHORT\\\"); // 6 hours\\n        require(commit3HPeriod >= 8 ? reveal3HPeriod >= 8: reveal3HPeriod >= commit3HPeriod, \\\"REVEAL_PERIOD_TOO_SHORT\\\");\\n        require(reveal3HPeriod <= 24, \\\"REVEAL_PERIOD_TOO_LONG\\\"); // 3 days\\n        require(commit3HPeriod >= 8 ? winner3HPeriod >= 8: winner3HPeriod >= commit3HPeriod, \\\"WINNER_PERIOD_TOO_SHORT\\\");\\n        require(winner3HPeriod <= 24, \\\"WINNER_PERIOD_TOO_LONG\\\"); // 3 days\\n        parameters.loot = loot;\\n        parameters.winnerGetLoot = winnerGetLoot;\\n        parameters.startTime = uint40(block.timestamp);\\n        parameters.commit3HPeriod = commit3HPeriod;\\n        parameters.reveal3HPeriod = reveal3HPeriod;\\n        parameters.winner3HPeriod = winner3HPeriod;\\n\\n        emit NewGame(address(loot), winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod);\\n    }\\n\\n    function freeFormInit(\\n        ILoot loot,\\n        bool winnerGetLoot,\\n        uint8 commit3HPeriod,\\n        uint8 reveal3HPeriod,\\n        uint8 winner3HPeriod\\n    ) public {\\n        _init(loot, winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod);\\n    }\\n\\n    function init(\\n        ILoot loot,\\n        bool winnerGetLoot,\\n        uint8 commit3HPeriod,\\n        uint8 reveal3HPeriod,\\n        uint8 winner3HPeriod\\n    ) public {\\n        require(address(loot) != address(0), \\\"INVALID_ZERO_LOOT\\\");\\n        require(address(loot) == _originalLoot || address(loot) == _mloot || address(loot) == _lootForEveryone, \\\"INVALID LOOT\\\");\\n        _init(loot, winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod);\\n    }\\n\\n    function clone(\\n        ILoot loot,\\n        bool winnerGetLoot,\\n        uint8 commit3HPeriod,\\n        uint8 reveal3HPeriod,\\n        uint8 winner3HPeriod\\n    ) external returns (address) {\\n        return _clone(loot, winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod, true);\\n    }\\n\\n    function freeFormClone(\\n        ILoot loot,\\n        bool winnerGetLoot,\\n        uint8 commit3HPeriod,\\n        uint8 reveal3HPeriod,\\n        uint8 winner3HPeriod\\n    ) external returns (address) {\\n        return _clone(loot, winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod, false);\\n    }\\n\\n    function _clone(\\n        ILoot loot,\\n        bool winnerGetLoot,\\n        uint8 commit3HPeriod,\\n        uint8 reveal3HPeriod,\\n        uint8 winner3HPeriod,\\n        bool generateXP\\n    ) internal returns(address) {\\n        address implementation;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            implementation := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\\n        }\\n        if (implementation == address(0)) {\\n            implementation = address(this);\\n        }\\n        address yooloot = Clones.clone(implementation);\\n        emit Cloned(yooloot, generateXP);\\n        if (generateXP) {\\n            YooLoot(yooloot).init(loot, winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod);\\n            _lootXP.setSource(yooloot, true);\\n        } else {\\n            YooLoot(yooloot).freeFormInit(loot, winnerGetLoot, commit3HPeriod, reveal3HPeriod, winner3HPeriod);\\n        }\\n        return yooloot;\\n    }\\n\\n    function commitLootDeck(uint256 lootId, bytes32 deckHash) external {\\n        require((block.timestamp - parameters.startTime) < (3 hours * uint256(parameters.commit3HPeriod)), \\\"COMMIT_PERIOD_OVER\\\");\\n        require(deckHash != 0x0000000000000000000000000000000000000000000000000000000000000001, \\\"INVALID HASH\\\");\\n        deckHashes[lootId] = deckHash;\\n        deposits[lootId] = msg.sender;\\n        parameters.loot.transferFrom(msg.sender, address(this), lootId);\\n        emit LootDeckSubmitted(msg.sender, lootId, deckHash);\\n    }\\n\\n    function changeDeck(uint256 oldLootId, uint256 lootId, bytes32 deckHash) external {\\n        require((block.timestamp - parameters.startTime) < (3 hours * uint256(parameters.commit3HPeriod)), \\\"COMMIT_PERIOD_OVER\\\");\\n        require(deckHash != 0x0000000000000000000000000000000000000000000000000000000000000001, \\\"INVALID HASH\\\");\\n        require(deckHash != 0x0000000000000000000000000000000000000000000000000000000000000000, \\\"NEVER_SUBMITTED\\\");\\n\\n        require(msg.sender == deposits[oldLootId], \\\"NOT_YOUR_LOOT\\\");\\n        deckHashes[lootId] = deckHash;\\n        if (oldLootId != lootId) {\\n            deckHashes[oldLootId] = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n            deposits[oldLootId] = address(0);\\n            deposits[lootId] = msg.sender;\\n            parameters.loot.safeTransferFrom(address(this), msg.sender, oldLootId);\\n            parameters.loot.transferFrom(msg.sender, address(this), lootId);\\n        }\\n\\n        emit LootDeckCanceled(msg.sender, oldLootId);\\n        emit LootDeckSubmitted(msg.sender, lootId, deckHash);\\n    }\\n\\n    function cancelDeck(uint256 oldLootId) external {\\n        require((block.timestamp - parameters.startTime) < (3 hours * uint256(parameters.commit3HPeriod)), \\\"COMMIT_PERIOD_OVER\\\");\\n        require(msg.sender == deposits[oldLootId], \\\"NOT_YOUR_LOOT\\\");\\n        deckHashes[oldLootId] = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n        deposits[oldLootId] = address(0);\\n        parameters.loot.safeTransferFrom(address(this), msg.sender, oldLootId);\\n        emit LootDeckCanceled(msg.sender, oldLootId);\\n    }\\n\\n    function revealLootDeck(\\n        uint256 lootId,\\n        uint8[8] calldata deckWithStartIndex1,\\n        bytes32 secret\\n    ) external {\\n        uint256 commitPeriod = (3 hours * uint256(parameters.commit3HPeriod));\\n        uint256 timePassed = block.timestamp - parameters.startTime;\\n\\n        require(timePassed > commitPeriod, \\\"REVEAL_PERIOD_NOT_STARTED\\\");\\n\\n        require(timePassed < commitPeriod + 3 hours * uint256(parameters.reveal3HPeriod), \\\"REVEAL_PERIOD_OVER\\\");\\n\\n        bytes32 deckHash = deckHashes[lootId];\\n        require(deckHash != 0x0000000000000000000000000000000000000000000000000000000000000001, \\\"ALREADY_REVEALED\\\");\\n        require(deckHash != 0x0000000000000000000000000000000000000000000000000000000000000000, \\\"NEVER_SUBMITTED\\\");\\n\\n        require(keccak256(abi.encodePacked(secret, lootId, deckWithStartIndex1)) == deckHash, \\\"INVALID_SECRET'\\\");\\n        deckHashes[lootId] = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n        uint8[8] memory indicesUsed;\\n        for (uint8 i = 0; i < 8; i++) {\\n            uint8 index = deckWithStartIndex1[i] - 1;\\n            indicesUsed[index]++;\\n            uint8 power = pluckPower(lootId, index, address(parameters.loot) == _lootForEveryone);\\n            uint256 current = rounds[i][power];\\n            if (current == 0) {\\n                rounds[i][power] = lootId;\\n            } else if (current != 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                rounds[i][power] = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            }\\n        }\\n        for (uint8 i = 0; i < 8; i++) {\\n            require(indicesUsed[i] == 1, \\\"INVALID_DECK\\\");\\n        }\\n        emit LootDeckRevealed(lootId, deckWithStartIndex1);\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function winner()\\n        public\\n        view\\n        returns (\\n            address winnerAddress,\\n            uint256 winnerLootId,\\n            uint256 winnerScore\\n        )\\n    {\\n        require((block.timestamp - parameters.startTime) > (3 hours * (uint256(parameters.commit3HPeriod) + uint256(parameters.reveal3HPeriod))), \\\"REVEAL_PERIOD_NOT_OVER\\\");\\n\\n        uint256[8] memory winnerLootPerRound;\\n        for (uint8 round = 0; round < 8; round++) {\\n            for (uint8 power = 126; power > 0; power--) {\\n                uint256 lootId = rounds[round][power - 1];\\n                if (lootId > 0 && lootId != 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                    winnerLootPerRound[round] = lootId;\\n                    winnerAddress = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (winnerAddress != 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF) { // nobody won a round;\\n            return (address(0), 0, 0);\\n        }\\n\\n        for (uint8 i = 0; i < 8; i++) {\\n            uint8 extra = 0;\\n            uint8 tmpScore;\\n            for (uint8 j = 0; j < 8; j++) {\\n                if (winnerLootPerRound[j] == 0) {\\n                    extra += (j + 1);\\n                } else if (winnerLootPerRound[j] == winnerLootPerRound[i]) {\\n                    tmpScore += extra + (j + 1);\\n                    extra = 0;\\n                }\\n            }\\n            if (tmpScore >= winnerScore) {\\n                // give more power to player who win later rounds\\n                winnerLootId = winnerLootPerRound[i];\\n                winnerScore = tmpScore;\\n            }\\n        }\\n        winnerAddress = deposits[winnerLootId];\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function individualScore(uint256 lootId) public view returns (uint256 score) {\\n        require(\\n            lootId > 0 && lootId != 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\\n            \\\"INVALID_LOOT\\\"\\n        );\\n\\n        require((block.timestamp - parameters.startTime) > (3 hours * (uint256(parameters.commit3HPeriod) + uint256(parameters.reveal3HPeriod))), \\\"REVEAL_PERIOD_NOT_OVER\\\");\\n\\n        uint256 extra = 0;\\n        for (uint8 round = 0; round < 8; round++) {\\n            bool anyone = false;\\n            for (uint8 power = 126; power > 0; power--) {\\n                uint256 lootIdHere = rounds[round][power - 1];\\n                if (lootIdHere == lootId) {\\n                    score += (round + 1) + extra;\\n                    anyone = true;\\n                    break;\\n                } else if (\\n                    lootIdHere > 0 && lootIdHere != 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                ) {\\n                    anyone = true;\\n                    break;\\n                }\\n            }\\n            if (!anyone) {\\n                extra += (round + 1);\\n            } else {\\n                extra = 0;\\n            }\\n        }\\n    }\\n\\n    ///@notice get all info in the minimum calls\\n    function getTokenDataOfOwner(\\n        address owner,\\n        uint256 start,\\n        uint256 num\\n    ) external view returns (TokenData[] memory tokens) {\\n        uint256 balance = parameters.loot.balanceOf(owner);\\n        require(balance >= start + num, \\\"TOO_MANY_TOKEN_REQUESTED\\\");\\n        tokens = new TokenData[](num);\\n        uint8[8] memory baseDeck = [1,2,3,4,5,6,7,8];\\n        uint256 i = 0;\\n        while (i < num) {\\n            uint256 id = parameters.loot.tokenOfOwnerByIndex(owner, start + i);\\n            tokens[i] = TokenData(id, parameters.loot.tokenURI(id), getDeckPower(id, baseDeck, address(parameters.loot) == _lootForEveryone));\\n            i++;\\n        }\\n    }\\n\\n    function getTokenData(\\n        uint256 id\\n    ) external view returns (TokenData memory) {\\n        uint8[8] memory baseDeck = [1,2,3,4,5,6,7,8];\\n        return TokenData(id, parameters.loot.tokenURI(id), getDeckPower(id, baseDeck, address(parameters.loot) == _lootForEveryone));\\n    }\\n\\n    function claimVictoryLoot(uint256 lootToPick) external {\\n        require(parameters.winnerGetLoot, \\\"NO_LOOT_TO_WIN\\\");\\n\\n        require((block.timestamp - parameters.startTime) < (3 hours * (uint256(parameters.commit3HPeriod) + uint256(parameters.reveal3HPeriod) + uint256(parameters.winner3HPeriod))), \\\"VICTORY_PERIOD_OVER\\\");\\n\\n        (address winnerAddress, , ) = winner();\\n        require(winnerAddress == msg.sender, \\\"NOT_WINNER\\\");\\n        address takenFrom = deposits[lootToPick];\\n        require(takenFrom != msg.sender, \\\"ALREADY_OWNER\\\");\\n        parameters.loot.safeTransferFrom(address(this), msg.sender, lootToPick);\\n        parameters.startTime = 1;\\n\\n        emit WinnerWithdrawal(msg.sender, takenFrom, lootToPick);\\n    }\\n\\n    function claimVictoryERC20(IERC20 token) external {\\n        require(address(token) != address(parameters.loot), \\\"INVALID_ERC20\\\");\\n        (address winnerAddress, , ) = winner();\\n        require(winnerAddress == msg.sender, \\\"NOT_WINNER\\\");\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    function withdrawAndGetXP(uint256 lootId) external {\\n        (address winnerAddress, uint256 winnerLootId, uint256 winnerScore) = winner();\\n\\n        if (!((block.timestamp - parameters.startTime) > (3 hours * (uint256(parameters.commit3HPeriod) + uint256(parameters.reveal3HPeriod) + uint256(parameters.winner3HPeriod))))) {\\n            require(winnerAddress == address(0), \\\"VICTORY_PERIOD_NOT_OVER\\\");\\n        }\\n\\n        require(deposits[lootId] == msg.sender, \\\"NOT_OWNER\\\");\\n        require(\\n            deckHashes[lootId] == 0x0000000000000000000000000000000000000000000000000000000000000001,\\n            \\\"DID_NOT_REVEAL\\\"\\n        );\\n        parameters.loot.safeTransferFrom(address(this), msg.sender, lootId);\\n        uint256 xpGained;\\n        if (lootId == winnerLootId) {\\n            xpGained = 10000 * winnerScore;\\n        } else {\\n            uint256 score = individualScore(lootId);\\n            xpGained = 100 + 1000 * score;\\n        }\\n\\n        if (!_lootXP.addXP(lootId, xpGained)) {\\n            xpGained = 0;\\n        }\\n\\n        emit LootWithdrawn(msg.sender, lootId, xpGained);\\n    }\\n\\n    function getDeckPower(uint256 lootId, uint8[8] memory deckWithStartIndex1, bool lootForEveryone) public pure returns (uint8[8] memory deckPower) {\\n        for (uint8 i = 0; i < 8; i++) {\\n            deckPower[i] = pluckPower(lootId, deckWithStartIndex1[i] - 1, lootForEveryone);\\n        }\\n    }\\n\\n    // -----------------------------------------------------------\\n\\n    function pluckPower(uint256 lootId, uint256 gearType, bool lootForEveryone) internal pure returns (uint8 power) {\\n        (uint256 index, uint256 greatness) = pluck(lootId, gearType, lootForEveryone);\\n        if (greatness <= 14) {\\n            greatness = 3;\\n        } else if (greatness == 19) {\\n            greatness = 1;\\n        } else if (greatness == 20) {\\n            greatness = 0;\\n        } else {\\n            greatness = 2;\\n        }\\n        if (gearType == 0) {\\n            return uint8(125 - index);\\n        } else if (gearType < 6) {\\n            return uint8(125 - (18 + (gearType - 1) * 15 + index));\\n        } else if (gearType == 6) {\\n            return uint8(125 - (18 + 5 * 15 + index * 4 + greatness));\\n        } else {\\n            return uint8(125 - (18 + 5 * 15 + 3 * 4 + index * 4 + greatness));\\n        }\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function pluck(uint256 tokenId, uint256 gearType, bool lootForEveryone) internal pure returns (uint256 index, uint256 greatness) {\\n        string memory keyPrefix = \\\"WEAPON\\\";\\n        uint256 length = 18;\\n        if (gearType == 1) {\\n            keyPrefix = \\\"CHEST\\\";\\n            length = 15;\\n        } else if (gearType == 2) {\\n            keyPrefix = \\\"HEAD\\\";\\n            length = 15;\\n        } else if (gearType == 3) {\\n            keyPrefix = \\\"WAIST\\\";\\n            length = 15;\\n        } else if (gearType == 4) {\\n            keyPrefix = \\\"FOOT\\\";\\n            length = 15;\\n        } else if (gearType == 5) {\\n            keyPrefix = \\\"HAND\\\";\\n            length = 15;\\n        } else if (gearType == 6) {\\n            keyPrefix = \\\"NECK\\\";\\n            length = 3;\\n        } else if (gearType == 7) {\\n            keyPrefix = \\\"RING\\\";\\n            length = 5;\\n        }\\n\\n        // TODO test if necessary\\n        uint256 rand;\\n        if (!lootForEveryone || tokenId < 8001) {\\n            rand = random(string(abi.encodePacked(keyPrefix, toString(tokenId))));\\n        } else {\\n            rand = random(string(abi.encodePacked(keyPrefix, abi.encodePacked(address(uint160(tokenId))))));\\n        }\\n\\n        index = rand % length;\\n        greatness = rand % 21;\\n    }\\n\\n    // TODO test\\n    // solhint-disable-next-line code-complexity\\n    function pluckGreatness(uint256 tokenId, uint256 gearType) internal pure returns (uint8) {\\n        string memory keyPrefix = \\\"WEAPON\\\";\\n        if (gearType == 1) {\\n            keyPrefix = \\\"CHEST\\\";\\n        } else if (gearType == 2) {\\n            keyPrefix = \\\"HEAD\\\";\\n        } else if (gearType == 3) {\\n            keyPrefix = \\\"WAIST\\\";\\n        } else if (gearType == 4) {\\n            keyPrefix = \\\"FOOT\\\";\\n        } else if (gearType == 5) {\\n            keyPrefix = \\\"HAND\\\";\\n        } else if (gearType == 6) {\\n            keyPrefix = \\\"NECK\\\";\\n        } else if (gearType == 7) {\\n            keyPrefix = \\\"RING\\\";\\n        }\\n        uint256 rand;\\n        if (tokenId < 8001) {\\n            rand = random(string(abi.encodePacked(keyPrefix, toString(tokenId))));\\n        } else {\\n            rand = random(string(abi.encodePacked(keyPrefix, abi.encodePacked(address(uint160(tokenId))))));\\n        }\\n\\n        uint8 greatness = uint8(rand % 21);\\n        return greatness;\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT license\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function random(string memory input) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(input)));\\n    }\\n}\\n\",\"keccak256\":\"0x9fc030081918c8a3f8e46c49a7a84ea5f97637b292e9744f57962b74bf1ba9c6\",\"license\":\"AGPL-1.0\"},\"src/interfaces/ILoot.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface ILoot is IERC721Metadata, IERC721Enumerable {\\n\\n}\\n\",\"keccak256\":\"0x30abbcb072684ed7f8a5787dec21c7389bde64f042c79577b28854d58260138b\",\"license\":\"Unlicense\"},\"src/interfaces/ILootXP.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.7;\\n\\ninterface ILootXP{\\n    function xp(uint256 lootId) external returns (uint256);\\n\\n    function xpSource(address source) external returns (bool);\\n\\n    function xpSink(address sink) external returns (bool);\\n\\n    function generator(address generator) external returns (bool);\\n\\n    function addXP(uint256 lootId, uint256 amount) external returns (bool);\\n\\n    function removeXP(uint256 lootId, uint256 amount) external returns (bool);\\n\\n    function setSource(address source, bool add) external;\\n\\n    function setSink(address sink, bool add) external;\\n\\n    function setGenerator(address generator, bool add) external;\\n}\\n\",\"keccak256\":\"0x55bb48c4b0cb3ea19fa7c88e886e00434e7cdf89bd624903c10668b7ced5711b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162004739380380620047398339810160408190526200003591620003ea565b6001600160601b0319606088811b821660e0528751811b82166080526020880151811b821660a0526040880151901b1660c05262000077858585858562000084565b5050505050505062000523565b600154600160a01b900464ffffffffff1615620000e85760405162461bcd60e51b815260206004820152601360248201527f414c52454144595f494e495449414c495345440000000000000000000000000060448201526064015b60405180910390fd5b60028360ff1610156200013e5760405162461bcd60e51b815260206004820152601760248201527f434f4d4d49545f504552494f445f544f4f5f53484f52540000000000000000006044820152606401620000df565b60088360ff1610156200015b578260ff168260ff16101562000164565b60088260ff1610155b620001b25760405162461bcd60e51b815260206004820152601760248201527f52455645414c5f504552494f445f544f4f5f53484f52540000000000000000006044820152606401620000df565b60188260ff161115620002085760405162461bcd60e51b815260206004820152601660248201527f52455645414c5f504552494f445f544f4f5f4c4f4e47000000000000000000006044820152606401620000df565b60088360ff16101562000225578260ff168160ff1610156200022e565b60088160ff1610155b6200027c5760405162461bcd60e51b815260206004820152601760248201527f57494e4e45525f504552494f445f544f4f5f53484f52540000000000000000006044820152606401620000df565b60188160ff161115620002d25760405162461bcd60e51b815260206004820152601660248201527f57494e4e45525f504552494f445f544f4f5f4c4f4e47000000000000000000006044820152606401620000df565b600180546001600160a01b0387166001600160a01b0360ff60e01b01199091168117600160e01b8715159081029190911765ffffffffffff60a01b1916600160a01b4264ffffffffff160260ff60c81b191617600160c81b60ff8881169182029290921761ffff60d01b1916600160d01b88841690810260ff60d81b191691909117600160d81b938816938402179095556040805193845260208401919091528201939093526060810192909252907f89cc24effe0068a54496332a43194981e7c87f57abf57a356dee3b2ca6e1323e9060800160405180910390a25050505050565b8051620003c2816200050a565b919050565b80518015158114620003c257600080fd5b805160ff81168114620003c257600080fd5b6000806000806000806000610120888a0312156200040757600080fd5b875162000414816200050a565b96506020603f89018a136200042857600080fd5b604051606081016001600160401b03811182821017156200044d576200044d620004f4565b604052808a830160808c018d8111156200046657600080fd5b60005b600381101562000491576200047e83620003b5565b8452928501929185019160010162000469565b50839a50620004a081620003b5565b99505050505050620004b560a08901620003c7565b9350620004c560c08901620003d8565b9250620004d560e08901620003d8565b9150620004e66101008901620003d8565b905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200052057600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6141b46200058560003960008181610e8f01526132930152600081816112df0152818161148601528181611b77015261236101526000611430015260006113db01526141b46000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c80639b17ac66116100cd578063bbe0e56e11610081578063d378d09611610066578063d378d09614610451578063dfbf53ae14610471578063e1b28a58146104ab57600080fd5b8063bbe0e56e1461042b578063d06a72441461043e57600080fd5b8063b02c43d0116100b2578063b02c43d0146103aa578063b09afec1146103e0578063ba1533b21461040057600080fd5b80639b17ac661461035f5780639b4557e81461037257600080fd5b80636c37648a116101245780637eee28df116101095780637eee28df1461021c578063890357301461022f5780638e76c6921461034c57600080fd5b80636c37648a146101e8578063745fb2d61461020957600080fd5b80631f89d097116101555780631f89d097146101995780633a5110db146101ac578063506c0e86146101d557600080fd5b80631b16b4d3146101715780631c0dcf8714610186575b600080fd5b61018461017f366004613c5a565b6104cb565b005b610184610194366004613b1e565b6108e6565b6101846101a7366004613b1e565b610b36565b6101bf6101ba36600461397b565b610f66565b6040516101cc9190613e0e565b60405180910390f35b6101846101e33660046139ea565b61135c565b6101fb6101f6366004613b1e565b61154e565b6040519081526020016101cc565b610184610217366004613b50565b6117f1565b61018461022a3660046139cd565b611d6f565b6001546102f79073ffffffffffffffffffffffffffffffffffffffff81169064ffffffffff740100000000000000000000000000000000000000008204169060ff79010000000000000000000000000000000000000000000000000082048116917a01000000000000000000000000000000000000000000000000000081048216917b0100000000000000000000000000000000000000000000000000000082048116917c010000000000000000000000000000000000000000000000000000000090041686565b6040805173ffffffffffffffffffffffffffffffffffffffff909716875264ffffffffff909516602087015260ff938416948601949094529082166060850152166080830152151560a082015260c0016101cc565b61018461035a3660046139ea565b61153a565b61018461036d366004613c38565b611fd1565b6103856103803660046139ea565b612211565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101cc565b6103856103b8366004613b1e565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6103f36103ee366004613b1e565b61222c565b6040516101cc9190613ee0565b6101fb61040e366004613ca1565b600360209081526000928352604080842090915290825290205481565b610184610439366004613b1e565b6123a9565b61038561044c3660046139ea565b612783565b61046461045f366004613b8e565b612794565b6040516101cc9190613ecb565b61047961281a565b6040805173ffffffffffffffffffffffffffffffffffffffff90941684526020840192909252908201526060016101cc565b6101fb6104b9366004613b1e565b60026020526000908152604090205481565b6001546104fa90790100000000000000000000000000000000000000000000000000900460ff16612a30613f44565b6001546105269074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b10610592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f434f4d4d49545f504552494f445f4f564552000000000000000000000000000060448201526064015b60405180910390fd5b60018114156105fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c4944204841534800000000000000000000000000000000000000006044820152606401610589565b80610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e455645525f5355424d495454454400000000000000000000000000000000006044820152606401610589565b60008381526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1633146106f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e4f545f594f55525f4c4f4f54000000000000000000000000000000000000006044820152606401610589565b600082815260026020526040902081905582821461087d5760008381526002602090815260408083208390559082905280822080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091558483529181902080543393168317905560015490517f42842e0e00000000000000000000000000000000000000000000000000000000815230600482015260248101929092526044820185905273ffffffffffffffffffffffffffffffffffffffff16906342842e0e90606401600060405180830381600087803b1580156107d457600080fd5b505af11580156107e8573d6000803e3d6000fd5b50506001546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810186905273ffffffffffffffffffffffffffffffffffffffff90911692506323b872dd9150606401600060405180830381600087803b15801561086457600080fd5b505af1158015610878573d6000803e3d6000fd5b505050505b604051839033907ff1c7f9718b5514ae194b133997551a0ae0cd216fecedde802c4530bd52d3a59290600090a3604051818152829033907f192b0f1468348c5b80c08a20c51326bcee8ea98f2ed5e7b813b6b24e279255029060200160405180910390a3505050565b60015461091590790100000000000000000000000000000000000000000000000000900460ff16612a30613f44565b6001546109419074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b106109a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f434f4d4d49545f504552494f445f4f56455200000000000000000000000000006044820152606401610589565b60008181526020819052604090205473ffffffffffffffffffffffffffffffffffffffff163314610a35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e4f545f594f55525f4c4f4f54000000000000000000000000000000000000006044820152606401610589565b6000818152600260209081526040808320839055908290529081902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560015490517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b158015610aee57600080fd5b505af1158015610b02573d6000803e3d6000fd5b50506040518392503391507ff1c7f9718b5514ae194b133997551a0ae0cd216fecedde802c4530bd52d3a59290600090a350565b6000806000610b4361281a565b600154929550909350915060ff7b010000000000000000000000000000000000000000000000000000008204811691610bba917a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613ef3565b610bc49190613ef3565b610bd090612a30613f44565b600154610bfc9074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b11610c7f5773ffffffffffffffffffffffffffffffffffffffff831615610c7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f564943544f52595f504552494f445f4e4f545f4f5645520000000000000000006044820152606401610589565b60008481526020819052604090205473ffffffffffffffffffffffffffffffffffffffff163314610d0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610589565b600084815260026020526040902054600114610d84576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4449445f4e4f545f52455645414c0000000000000000000000000000000000006044820152606401610589565b6001546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810186905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b158015610dfc57600080fd5b505af1158015610e10573d6000803e3d6000fd5b50505050600082851415610e3157610e2a82612710613f44565b9050610e59565b6000610e3c8661154e565b9050610e4a816103e8613f44565b610e55906064613ef3565b9150505b6040517f5146ea0e00000000000000000000000000000000000000000000000000000000815260048101869052602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635146ea0e90604401602060405180830381600087803b158015610ee857600080fd5b505af1158015610efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2091906139b0565b610f28575060005b604051818152859033907f5892c6cb1d782a4f640c83141dd6dd939c114e55b9f5b700b15affb6d1fc7b849060200160405180910390a35050505050565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526060926000929116906370a082319060240160206040518083038186803b158015610fd657600080fd5b505afa158015610fea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100e9190613b37565b905061101a8385613ef3565b811015611083576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f544f4f5f4d414e595f544f4b454e5f52455155455354454400000000000000006044820152606401610589565b8267ffffffffffffffff81111561109c5761109c61411c565b6040519080825280602002602001820160405280156110d557816020015b6110c261391a565b8152602001906001900390816110ba5790505b50604080516101008101825260018152600260208201526003918101919091526004606082015260056080820152600660a0820152600760c0820152600860e082015290925060005b848110156113525760015460009073ffffffffffffffffffffffffffffffffffffffff16632f745c5989611152858b613ef3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482015260440160206040518083038186803b1580156111bb57600080fd5b505afa1580156111cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f39190613b37565b6040805160608101825282815260015491517fc87b56dd0000000000000000000000000000000000000000000000000000000081526004810184905292935091602083019173ffffffffffffffffffffffffffffffffffffffff169063c87b56dd9060240160006040518083038186803b15801561127057600080fd5b505afa158015611284573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526112ca9190810190613a53565b815260015460209091019061131e90849087907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614612794565b815250858381518110611333576113336140ed565b6020026020010181905250818061134990614022565b9250505061111e565b5050509392505050565b73ffffffffffffffffffffffffffffffffffffffff85166113d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5a45524f5f4c4f4f540000000000000000000000000000006044820152606401610589565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061147e57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b806114d457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b61153a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c4944204c4f4f5400000000000000000000000000000000000000006044820152606401610589565b6115478585858585612b61565b5050505050565b6000808211801561157f5750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b6115e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f4c4f4f5400000000000000000000000000000000000000006044820152606401610589565b6001546116329060ff7a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613ef3565b61163e90612a30613f44565b60015461166a9074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b116116d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f52455645414c5f504552494f445f4e4f545f4f564552000000000000000000006044820152606401610589565b6000805b60088160ff1610156117ea576000607e5b60ff8116156117ad5760ff831660009081526003602052604081208161170d600185613f98565b60ff1660ff1681526020019081526020016000205490508681141561175b5784611738856001613f0b565b60ff166117459190613ef3565b61174f9087613ef3565b955060019250506117ad565b60008111801561178b5750807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b1561179a5760019250506117ad565b50806117a581613fe7565b9150506116e6565b50806117d2576117be826001613f0b565b6117cb9060ff1684613ef3565b92506117d7565b600092505b50806117e28161405b565b9150506116d5565b5050919050565b60015460009061182390790100000000000000000000000000000000000000000000000000900460ff16612a30613f44565b6001549091506000906118559074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b90508181116118c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f52455645414c5f504552494f445f4e4f545f53544152544544000000000000006044820152606401610589565b6001546118f0907a010000000000000000000000000000000000000000000000000000900460ff16612a30613f44565b6118fa9083613ef3565b8110611962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f52455645414c5f504552494f445f4f56455200000000000000000000000000006044820152606401610589565b60008581526002602052604090205460018114156119dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f414c52454144595f52455645414c4544000000000000000000000000000000006044820152606401610589565b80611a43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e455645525f5355424d495454454400000000000000000000000000000000006044820152606401610589565b80848787604051602001611a5993929190613d75565b6040516020818303038152906040528051906020012014611ad6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f494e56414c49445f5345435245542700000000000000000000000000000000006044820152606401610589565b600086815260026020526040902060019055611af0613940565b60005b60088160ff161015611c855760006001888360ff1660088110611b1857611b186140ed565b602002016020810190611b2b9190613c86565b611b359190613f98565b9050828160ff1660088110611b4c57611b4c6140ed565b60200201805190611b5c8261405b565b60ff90811690915260015460009250611bb6918c91908516907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161461301f565b60ff80851660009081526003602090815260408083209385168352929052205490915080611c055760ff80851660009081526003602090815260408083209386168352929052208b9055611c6f565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14611c6f5760ff80851660009081526003602090815260408083209386168352929052207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90555b5050508080611c7d9061405b565b915050611af3565b5060005b60088160ff161015611d2d57818160ff1660088110611caa57611caa6140ed565b602002015160ff16600114611d1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f4445434b00000000000000000000000000000000000000006044820152606401610589565b80611d258161405b565b915050611c89565b50867f623ee6c2bd9ad515164ba132cb8f630acf54c0fd1e1118074c75676d8b41bab787604051611d5e9190613e8e565b60405180910390a250505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff82811691161415611df4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f4552433230000000000000000000000000000000000000006044820152606401610589565b6000611dfe61281a565b509091505073ffffffffffffffffffffffffffffffffffffffff81163314611e82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f57494e4e4552000000000000000000000000000000000000000000006044820152606401610589565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83169063a9059cbb90339083906370a082319060240160206040518083038186803b158015611ef157600080fd5b505afa158015611f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f299190613b37565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b158015611f9457600080fd5b505af1158015611fa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcc91906139b0565b505050565b60015461200090790100000000000000000000000000000000000000000000000000900460ff16612a30613f44565b60015461202c9074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b10612093576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f434f4d4d49545f504552494f445f4f56455200000000000000000000000000006044820152606401610589565b60018114156120fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c4944204841534800000000000000000000000000000000000000006044820152606401610589565b6000828152600260209081526040808320849055908290529081902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163390811790915560015491517f23b872dd00000000000000000000000000000000000000000000000000000000815260048101919091523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401600060405180830381600087803b1580156121be57600080fd5b505af11580156121d2573d6000803e3d6000fd5b50506040518381528492503391507f192b0f1468348c5b80c08a20c51326bcee8ea98f2ed5e7b813b6b24e279255029060200160405180910390a35050565b600061222286868686866001613100565b9695505050505050565b61223461391a565b6040805161010081018252600180825260026020808401919091526003838501526004606080850182905260056080860152600660a0860152600760c0860152600860e086015285519081018652878152925494517fc87b56dd000000000000000000000000000000000000000000000000000000008152908101879052929391929083019173ffffffffffffffffffffffffffffffffffffffff169063c87b56dd9060240160006040518083038186803b1580156122f257600080fd5b505afa158015612306573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261234c9190810190613a53565b81526001546020909101906123a090869085907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614612794565b90529392505050565b6001547c0100000000000000000000000000000000000000000000000000000000900460ff16612435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f5f4c4f4f545f544f5f57494e0000000000000000000000000000000000006044820152606401610589565b60015460ff7b0100000000000000000000000000000000000000000000000000000082048116916124a4917a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613ef3565b6124ae9190613ef3565b6124ba90612a30613f44565b6001546124e69074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b1061254d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f564943544f52595f504552494f445f4f564552000000000000000000000000006044820152606401610589565b600061255761281a565b509091505073ffffffffffffffffffffffffffffffffffffffff811633146125db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f57494e4e4552000000000000000000000000000000000000000000006044820152606401610589565b60008281526020819052604090205473ffffffffffffffffffffffffffffffffffffffff163381141561266a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f414c52454144595f4f574e4552000000000000000000000000000000000000006044820152606401610589565b6001546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810185905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b1580156126e257600080fd5b505af11580156126f6573d6000803e3d6000fd5b5050600180547fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555050604051839073ffffffffffffffffffffffffffffffffffffffff83169033907f0e8ee02dcd808c59c531ff08aaa928ebb99be178ce4babf9a2c12820d6acde3e90600090a4505050565b600061222286868686866000613100565b61279c613940565b60005b60088160ff161015612812576127de856001868460ff16600881106127c6576127c66140ed565b60200201516127d59190613f98565b60ff168561301f565b828260ff16600881106127f3576127f36140ed565b60ff90921660209290920201528061280a8161405b565b91505061279f565b509392505050565b6001546000908190819061286e9060ff7a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613ef3565b61287a90612a30613f44565b6001546128a69074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b1161290d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f52455645414c5f504552494f445f4e4f545f4f564552000000000000000000006044820152606401610589565b612915613940565b60005b60088160ff1610156129f857607e5b60ff8116156129e55760ff821660009081526003602052604081208161294e600185613f98565b60ff1660ff1681526020019081526020016000205490506000811180156129955750807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156129d25780848460ff16600881106129b0576129b06140ed565b60200201525073ffffffffffffffffffffffffffffffffffffffff95506129e5565b50806129dd81613fe7565b915050612927565b50806129f08161405b565b915050612918565b5073ffffffffffffffffffffffffffffffffffffffff80851614612a2457506000938493508392509050565b60005b60088160ff161015612b3357600080805b60088160ff161015612af057848160ff1660088110612a5957612a596140ed565b6020020151612a7e57612a6d816001613f0b565b612a779084613f0b565b9250612ade565b848460ff1660088110612a9357612a936140ed565b6020020151858260ff1660088110612aad57612aad6140ed565b60200201511415612ade57612ac3816001613f0b565b612acd9084613f0b565b612ad79083613f0b565b9150600092505b80612ae88161405b565b915050612a38565b50848160ff1610612b1e57838360ff1660088110612b1057612b106140ed565b602002015195508060ff1694505b50508080612b2b9061405b565b915050612a27565b505060008281526020819052604090205473ffffffffffffffffffffffffffffffffffffffff169391925090565b60015474010000000000000000000000000000000000000000900464ffffffffff1615612bea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f414c52454144595f494e495449414c49534544000000000000000000000000006044820152606401610589565b60028360ff161015612c58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f434f4d4d49545f504552494f445f544f4f5f53484f52540000000000000000006044820152606401610589565b60088360ff161015612c73578260ff168260ff161015612c7c565b60088260ff1610155b612ce2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f52455645414c5f504552494f445f544f4f5f53484f52540000000000000000006044820152606401610589565b60188260ff161115612d50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f52455645414c5f504552494f445f544f4f5f4c4f4e47000000000000000000006044820152606401610589565b60088360ff161015612d6b578260ff168160ff161015612d74565b60088160ff1610155b612dda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f57494e4e45525f504552494f445f544f4f5f53484f52540000000000000000006044820152606401610589565b60188160ff161115612e48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f57494e4e45525f504552494f445f544f4f5f4c4f4e47000000000000000000006044820152606401610589565b6001805473ffffffffffffffffffffffffffffffffffffffff87167fffffff00ffffffffffffffff000000000000000000000000000000000000000090911681177c0100000000000000000000000000000000000000000000000000000000871515908102919091177fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000004264ffffffffff16027fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff161779010000000000000000000000000000000000000000000000000060ff888116918202929092177fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff167a0100000000000000000000000000000000000000000000000000008884169081027fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffff16919091177b01000000000000000000000000000000000000000000000000000000938816938402179095556040805193845260208401919091528201939093526060810192909252907f89cc24effe0068a54496332a43194981e7c87f57abf57a356dee3b2ca6e1323e9060800160405180910390a25050505050565b600080600061302f8686866133a5565b91509150600e811161304357506003613069565b806013141561305457506001613069565b806014141561306557506000613069565b5060025b846130825761307982607d613f81565b925050506130f9565b60068510156130c25781613097600187613f81565b6130a290600f613f44565b6130ad906012613ef3565b6130b79190613ef3565b61307990607d613f81565b84600614156130e257806130d7836004613f44565b6130ad90605d613ef3565b806130ee836004613f44565b6130ad906069613ef3565b9392505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5460009073ffffffffffffffffffffffffffffffffffffffff81166131435750305b600061314e826136af565b6040805173ffffffffffffffffffffffffffffffffffffffff8316815286151560208201529192507f9b0fb4b172c9d2129423683d9cb666d68056e716090ab70de709fe4e07014dd1910160405180910390a183156132f6576040517f506c0e8600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152891515602483015260ff808a16604484015280891660648401528716608483015282169063506c0e869060a401600060405180830381600087803b15801561323157600080fd5b505af1158015613245573d6000803e3d6000fd5b50506040517f40b197f300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600160248301527f00000000000000000000000000000000000000000000000000000000000000001692506340b197f39150604401600060405180830381600087803b1580156132d957600080fd5b505af11580156132ed573d6000803e3d6000fd5b50505050613399565b6040517f8e76c69200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152891515602483015260ff808a166044840152808916606484015287166084830152821690638e76c6929060a401600060405180830381600087803b15801561338057600080fd5b505af1158015613394573d6000803e3d6000fd5b505050505b98975050505050505050565b60408051808201909152600681527f574541504f4e0000000000000000000000000000000000000000000000000000602082015260009081906012600186141561342657505060408051808201909152600581527f43484553540000000000000000000000000000000000000000000000000000006020820152600f6135c6565b856002141561346c57505060408051808201909152600481527f48454144000000000000000000000000000000000000000000000000000000006020820152600f6135c6565b85600314156134b257505060408051808201909152600581527f57414953540000000000000000000000000000000000000000000000000000006020820152600f6135c6565b85600414156134f857505060408051808201909152600481527f464f4f54000000000000000000000000000000000000000000000000000000006020820152600f6135c6565b856005141561353e57505060408051808201909152600481527f48414e44000000000000000000000000000000000000000000000000000000006020820152600f6135c6565b856006141561358457505060408051808201909152600481527f4e45434b00000000000000000000000000000000000000000000000000000000602082015260036135c6565b85600714156135c657505060408051808201909152600481527f52494e4700000000000000000000000000000000000000000000000000000000602082015260055b60008515806135d65750611f4188105b156136145761360d836135e88a613791565b6040516020016135f9929190613ddf565b6040516020818303038152906040526138cb565b905061368b565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608a901b166020820152613688908490603401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526135f99291602001613ddf565b90505b613695828261407b565b94506136a260158261407b565b9350505050935093915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff811661378c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401610589565b919050565b6060816137d157505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156137fb57806137e581614022565b91506137f49050600a83613f30565b91506137d5565b60008167ffffffffffffffff8111156138165761381661411c565b6040519080825280601f01601f191660200182016040528015613840576020820181803683370190505b5090505b84156138c357613855600183613f81565b9150613862600a8661407b565b61386d906030613ef3565b60f81b818381518110613882576138826140ed565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506138bc600a86613f30565b9450613844565b949350505050565b6000816040516020016138de9190613dc3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012092915050565b6040518060600160405280600081526020016060815260200161393b613940565b905290565b6040518061010001604052806008906020820280368337509192915050565b803561378c81614170565b803560ff8116811461378c57600080fd5b60008060006060848603121561399057600080fd5b833561399b8161414b565b95602085013595506040909401359392505050565b6000602082840312156139c257600080fd5b81516130f981614170565b6000602082840312156139df57600080fd5b81356130f98161414b565b600080600080600060a08688031215613a0257600080fd5b8535613a0d8161414b565b94506020860135613a1d81614170565b9350613a2b6040870161396a565b9250613a396060870161396a565b9150613a476080870161396a565b90509295509295909350565b600060208284031215613a6557600080fd5b815167ffffffffffffffff80821115613a7d57600080fd5b818401915084601f830112613a9157600080fd5b815181811115613aa357613aa361411c565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715613ae957613ae961411c565b81604052828152876020848701011115613b0257600080fd5b613b13836020830160208801613fbb565b979650505050505050565b600060208284031215613b3057600080fd5b5035919050565b600060208284031215613b4957600080fd5b5051919050565b60008060006101408486031215613b6657600080fd5b83359250610120840185811115613b7c57600080fd5b60208501925080359150509250925092565b60008060006101408486031215613ba457600080fd5b83359250602085603f860112613bb957600080fd5b604051610100810181811067ffffffffffffffff82111715613bdd57613bdd61411c565b60405280868301610120880189811115613bf657600080fd5b60005b6008811015613c1d57613c0b8361396a565b84529285019291850191600101613bf9565b50839650613c2a8161395f565b955050505050509250925092565b60008060408385031215613c4b57600080fd5b50508035926020909101359150565b600080600060608486031215613c6f57600080fd5b505081359360208301359350604090920135919050565b600060208284031215613c9857600080fd5b6130f98261396a565b60008060408385031215613cb457600080fd5b613cbd8361396a565b9150613ccb6020840161396a565b90509250929050565b8060005b6008811015613cfa57815160ff16845260209384019390910190600101613cd8565b50505050565b6000610140825184526020830151816020860152805180838701526101609250613d308184880160208501613fbb565b60408501519150613d446040870183613cd4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01694909401019392505050565b838152600060208481840152604083018460005b6008811015613db05760ff613d9d8361396a565b1683529183019190830190600101613d89565b5050505061014082019050949350505050565b60008251613dd5818460208701613fbb565b9190910192915050565b60008351613df1818460208801613fbb565b835190830190613e05818360208801613fbb565b01949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613e81577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452613e6f858351613d00565b94509285019290850190600101613e35565b5092979650505050505050565b6101008101818360005b6008811015613ec25760ff613eac8361396a565b1683526020928301929190910190600101613e98565b50505092915050565b6101008101613eda8284613cd4565b92915050565b6020815260006130f96020830184613d00565b60008219821115613f0657613f0661408f565b500190565b600060ff821660ff84168060ff03821115613f2857613f2861408f565b019392505050565b600082613f3f57613f3f6140be565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f7c57613f7c61408f565b500290565b600082821015613f9357613f9361408f565b500390565b600060ff821660ff841680821015613fb257613fb261408f565b90039392505050565b60005b83811015613fd6578181015183820152602001613fbe565b83811115613cfa5750506000910152565b600060ff821680613ffa57613ffa61408f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156140545761405461408f565b5060010190565b600060ff821660ff8114156140725761407261408f565b60010192915050565b60008261408a5761408a6140be565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461416d57600080fd5b50565b801515811461416d57600080fdfea2646970667358221220815bc031d0febd1696ee5c2e3e8a5b3f4ce988d4de9984b3e6b3c2ef6868516664736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c80639b17ac66116100cd578063bbe0e56e11610081578063d378d09611610066578063d378d09614610451578063dfbf53ae14610471578063e1b28a58146104ab57600080fd5b8063bbe0e56e1461042b578063d06a72441461043e57600080fd5b8063b02c43d0116100b2578063b02c43d0146103aa578063b09afec1146103e0578063ba1533b21461040057600080fd5b80639b17ac661461035f5780639b4557e81461037257600080fd5b80636c37648a116101245780637eee28df116101095780637eee28df1461021c578063890357301461022f5780638e76c6921461034c57600080fd5b80636c37648a146101e8578063745fb2d61461020957600080fd5b80631f89d097116101555780631f89d097146101995780633a5110db146101ac578063506c0e86146101d557600080fd5b80631b16b4d3146101715780631c0dcf8714610186575b600080fd5b61018461017f366004613c5a565b6104cb565b005b610184610194366004613b1e565b6108e6565b6101846101a7366004613b1e565b610b36565b6101bf6101ba36600461397b565b610f66565b6040516101cc9190613e0e565b60405180910390f35b6101846101e33660046139ea565b61135c565b6101fb6101f6366004613b1e565b61154e565b6040519081526020016101cc565b610184610217366004613b50565b6117f1565b61018461022a3660046139cd565b611d6f565b6001546102f79073ffffffffffffffffffffffffffffffffffffffff81169064ffffffffff740100000000000000000000000000000000000000008204169060ff79010000000000000000000000000000000000000000000000000082048116917a01000000000000000000000000000000000000000000000000000081048216917b0100000000000000000000000000000000000000000000000000000082048116917c010000000000000000000000000000000000000000000000000000000090041686565b6040805173ffffffffffffffffffffffffffffffffffffffff909716875264ffffffffff909516602087015260ff938416948601949094529082166060850152166080830152151560a082015260c0016101cc565b61018461035a3660046139ea565b61153a565b61018461036d366004613c38565b611fd1565b6103856103803660046139ea565b612211565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101cc565b6103856103b8366004613b1e565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6103f36103ee366004613b1e565b61222c565b6040516101cc9190613ee0565b6101fb61040e366004613ca1565b600360209081526000928352604080842090915290825290205481565b610184610439366004613b1e565b6123a9565b61038561044c3660046139ea565b612783565b61046461045f366004613b8e565b612794565b6040516101cc9190613ecb565b61047961281a565b6040805173ffffffffffffffffffffffffffffffffffffffff90941684526020840192909252908201526060016101cc565b6101fb6104b9366004613b1e565b60026020526000908152604090205481565b6001546104fa90790100000000000000000000000000000000000000000000000000900460ff16612a30613f44565b6001546105269074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b10610592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f434f4d4d49545f504552494f445f4f564552000000000000000000000000000060448201526064015b60405180910390fd5b60018114156105fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c4944204841534800000000000000000000000000000000000000006044820152606401610589565b80610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e455645525f5355424d495454454400000000000000000000000000000000006044820152606401610589565b60008381526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1633146106f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e4f545f594f55525f4c4f4f54000000000000000000000000000000000000006044820152606401610589565b600082815260026020526040902081905582821461087d5760008381526002602090815260408083208390559082905280822080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091558483529181902080543393168317905560015490517f42842e0e00000000000000000000000000000000000000000000000000000000815230600482015260248101929092526044820185905273ffffffffffffffffffffffffffffffffffffffff16906342842e0e90606401600060405180830381600087803b1580156107d457600080fd5b505af11580156107e8573d6000803e3d6000fd5b50506001546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810186905273ffffffffffffffffffffffffffffffffffffffff90911692506323b872dd9150606401600060405180830381600087803b15801561086457600080fd5b505af1158015610878573d6000803e3d6000fd5b505050505b604051839033907ff1c7f9718b5514ae194b133997551a0ae0cd216fecedde802c4530bd52d3a59290600090a3604051818152829033907f192b0f1468348c5b80c08a20c51326bcee8ea98f2ed5e7b813b6b24e279255029060200160405180910390a3505050565b60015461091590790100000000000000000000000000000000000000000000000000900460ff16612a30613f44565b6001546109419074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b106109a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f434f4d4d49545f504552494f445f4f56455200000000000000000000000000006044820152606401610589565b60008181526020819052604090205473ffffffffffffffffffffffffffffffffffffffff163314610a35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e4f545f594f55525f4c4f4f54000000000000000000000000000000000000006044820152606401610589565b6000818152600260209081526040808320839055908290529081902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560015490517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b158015610aee57600080fd5b505af1158015610b02573d6000803e3d6000fd5b50506040518392503391507ff1c7f9718b5514ae194b133997551a0ae0cd216fecedde802c4530bd52d3a59290600090a350565b6000806000610b4361281a565b600154929550909350915060ff7b010000000000000000000000000000000000000000000000000000008204811691610bba917a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613ef3565b610bc49190613ef3565b610bd090612a30613f44565b600154610bfc9074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b11610c7f5773ffffffffffffffffffffffffffffffffffffffff831615610c7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f564943544f52595f504552494f445f4e4f545f4f5645520000000000000000006044820152606401610589565b60008481526020819052604090205473ffffffffffffffffffffffffffffffffffffffff163314610d0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610589565b600084815260026020526040902054600114610d84576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4449445f4e4f545f52455645414c0000000000000000000000000000000000006044820152606401610589565b6001546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810186905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b158015610dfc57600080fd5b505af1158015610e10573d6000803e3d6000fd5b50505050600082851415610e3157610e2a82612710613f44565b9050610e59565b6000610e3c8661154e565b9050610e4a816103e8613f44565b610e55906064613ef3565b9150505b6040517f5146ea0e00000000000000000000000000000000000000000000000000000000815260048101869052602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635146ea0e90604401602060405180830381600087803b158015610ee857600080fd5b505af1158015610efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2091906139b0565b610f28575060005b604051818152859033907f5892c6cb1d782a4f640c83141dd6dd939c114e55b9f5b700b15affb6d1fc7b849060200160405180910390a35050505050565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526060926000929116906370a082319060240160206040518083038186803b158015610fd657600080fd5b505afa158015610fea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100e9190613b37565b905061101a8385613ef3565b811015611083576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f544f4f5f4d414e595f544f4b454e5f52455155455354454400000000000000006044820152606401610589565b8267ffffffffffffffff81111561109c5761109c61411c565b6040519080825280602002602001820160405280156110d557816020015b6110c261391a565b8152602001906001900390816110ba5790505b50604080516101008101825260018152600260208201526003918101919091526004606082015260056080820152600660a0820152600760c0820152600860e082015290925060005b848110156113525760015460009073ffffffffffffffffffffffffffffffffffffffff16632f745c5989611152858b613ef3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482015260440160206040518083038186803b1580156111bb57600080fd5b505afa1580156111cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f39190613b37565b6040805160608101825282815260015491517fc87b56dd0000000000000000000000000000000000000000000000000000000081526004810184905292935091602083019173ffffffffffffffffffffffffffffffffffffffff169063c87b56dd9060240160006040518083038186803b15801561127057600080fd5b505afa158015611284573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526112ca9190810190613a53565b815260015460209091019061131e90849087907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614612794565b815250858381518110611333576113336140ed565b6020026020010181905250818061134990614022565b9250505061111e565b5050509392505050565b73ffffffffffffffffffffffffffffffffffffffff85166113d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5a45524f5f4c4f4f540000000000000000000000000000006044820152606401610589565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061147e57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b806114d457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b61153a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c4944204c4f4f5400000000000000000000000000000000000000006044820152606401610589565b6115478585858585612b61565b5050505050565b6000808211801561157f5750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b6115e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f4c4f4f5400000000000000000000000000000000000000006044820152606401610589565b6001546116329060ff7a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613ef3565b61163e90612a30613f44565b60015461166a9074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b116116d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f52455645414c5f504552494f445f4e4f545f4f564552000000000000000000006044820152606401610589565b6000805b60088160ff1610156117ea576000607e5b60ff8116156117ad5760ff831660009081526003602052604081208161170d600185613f98565b60ff1660ff1681526020019081526020016000205490508681141561175b5784611738856001613f0b565b60ff166117459190613ef3565b61174f9087613ef3565b955060019250506117ad565b60008111801561178b5750807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b1561179a5760019250506117ad565b50806117a581613fe7565b9150506116e6565b50806117d2576117be826001613f0b565b6117cb9060ff1684613ef3565b92506117d7565b600092505b50806117e28161405b565b9150506116d5565b5050919050565b60015460009061182390790100000000000000000000000000000000000000000000000000900460ff16612a30613f44565b6001549091506000906118559074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b90508181116118c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f52455645414c5f504552494f445f4e4f545f53544152544544000000000000006044820152606401610589565b6001546118f0907a010000000000000000000000000000000000000000000000000000900460ff16612a30613f44565b6118fa9083613ef3565b8110611962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f52455645414c5f504552494f445f4f56455200000000000000000000000000006044820152606401610589565b60008581526002602052604090205460018114156119dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f414c52454144595f52455645414c4544000000000000000000000000000000006044820152606401610589565b80611a43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e455645525f5355424d495454454400000000000000000000000000000000006044820152606401610589565b80848787604051602001611a5993929190613d75565b6040516020818303038152906040528051906020012014611ad6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f494e56414c49445f5345435245542700000000000000000000000000000000006044820152606401610589565b600086815260026020526040902060019055611af0613940565b60005b60088160ff161015611c855760006001888360ff1660088110611b1857611b186140ed565b602002016020810190611b2b9190613c86565b611b359190613f98565b9050828160ff1660088110611b4c57611b4c6140ed565b60200201805190611b5c8261405b565b60ff90811690915260015460009250611bb6918c91908516907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161461301f565b60ff80851660009081526003602090815260408083209385168352929052205490915080611c055760ff80851660009081526003602090815260408083209386168352929052208b9055611c6f565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14611c6f5760ff80851660009081526003602090815260408083209386168352929052207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90555b5050508080611c7d9061405b565b915050611af3565b5060005b60088160ff161015611d2d57818160ff1660088110611caa57611caa6140ed565b602002015160ff16600114611d1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f4445434b00000000000000000000000000000000000000006044820152606401610589565b80611d258161405b565b915050611c89565b50867f623ee6c2bd9ad515164ba132cb8f630acf54c0fd1e1118074c75676d8b41bab787604051611d5e9190613e8e565b60405180910390a250505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff82811691161415611df4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f4552433230000000000000000000000000000000000000006044820152606401610589565b6000611dfe61281a565b509091505073ffffffffffffffffffffffffffffffffffffffff81163314611e82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f57494e4e4552000000000000000000000000000000000000000000006044820152606401610589565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83169063a9059cbb90339083906370a082319060240160206040518083038186803b158015611ef157600080fd5b505afa158015611f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f299190613b37565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b158015611f9457600080fd5b505af1158015611fa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcc91906139b0565b505050565b60015461200090790100000000000000000000000000000000000000000000000000900460ff16612a30613f44565b60015461202c9074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b10612093576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f434f4d4d49545f504552494f445f4f56455200000000000000000000000000006044820152606401610589565b60018114156120fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c4944204841534800000000000000000000000000000000000000006044820152606401610589565b6000828152600260209081526040808320849055908290529081902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163390811790915560015491517f23b872dd00000000000000000000000000000000000000000000000000000000815260048101919091523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401600060405180830381600087803b1580156121be57600080fd5b505af11580156121d2573d6000803e3d6000fd5b50506040518381528492503391507f192b0f1468348c5b80c08a20c51326bcee8ea98f2ed5e7b813b6b24e279255029060200160405180910390a35050565b600061222286868686866001613100565b9695505050505050565b61223461391a565b6040805161010081018252600180825260026020808401919091526003838501526004606080850182905260056080860152600660a0860152600760c0860152600860e086015285519081018652878152925494517fc87b56dd000000000000000000000000000000000000000000000000000000008152908101879052929391929083019173ffffffffffffffffffffffffffffffffffffffff169063c87b56dd9060240160006040518083038186803b1580156122f257600080fd5b505afa158015612306573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261234c9190810190613a53565b81526001546020909101906123a090869085907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614612794565b90529392505050565b6001547c0100000000000000000000000000000000000000000000000000000000900460ff16612435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f5f4c4f4f545f544f5f57494e0000000000000000000000000000000000006044820152606401610589565b60015460ff7b0100000000000000000000000000000000000000000000000000000082048116916124a4917a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613ef3565b6124ae9190613ef3565b6124ba90612a30613f44565b6001546124e69074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b1061254d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f564943544f52595f504552494f445f4f564552000000000000000000000000006044820152606401610589565b600061255761281a565b509091505073ffffffffffffffffffffffffffffffffffffffff811633146125db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f57494e4e4552000000000000000000000000000000000000000000006044820152606401610589565b60008281526020819052604090205473ffffffffffffffffffffffffffffffffffffffff163381141561266a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f414c52454144595f4f574e4552000000000000000000000000000000000000006044820152606401610589565b6001546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810185905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b1580156126e257600080fd5b505af11580156126f6573d6000803e3d6000fd5b5050600180547fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555050604051839073ffffffffffffffffffffffffffffffffffffffff83169033907f0e8ee02dcd808c59c531ff08aaa928ebb99be178ce4babf9a2c12820d6acde3e90600090a4505050565b600061222286868686866000613100565b61279c613940565b60005b60088160ff161015612812576127de856001868460ff16600881106127c6576127c66140ed565b60200201516127d59190613f98565b60ff168561301f565b828260ff16600881106127f3576127f36140ed565b60ff90921660209290920201528061280a8161405b565b91505061279f565b509392505050565b6001546000908190819061286e9060ff7a0100000000000000000000000000000000000000000000000000008204811691790100000000000000000000000000000000000000000000000000900416613ef3565b61287a90612a30613f44565b6001546128a69074010000000000000000000000000000000000000000900464ffffffffff1642613f81565b1161290d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f52455645414c5f504552494f445f4e4f545f4f564552000000000000000000006044820152606401610589565b612915613940565b60005b60088160ff1610156129f857607e5b60ff8116156129e55760ff821660009081526003602052604081208161294e600185613f98565b60ff1660ff1681526020019081526020016000205490506000811180156129955750807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156129d25780848460ff16600881106129b0576129b06140ed565b60200201525073ffffffffffffffffffffffffffffffffffffffff95506129e5565b50806129dd81613fe7565b915050612927565b50806129f08161405b565b915050612918565b5073ffffffffffffffffffffffffffffffffffffffff80851614612a2457506000938493508392509050565b60005b60088160ff161015612b3357600080805b60088160ff161015612af057848160ff1660088110612a5957612a596140ed565b6020020151612a7e57612a6d816001613f0b565b612a779084613f0b565b9250612ade565b848460ff1660088110612a9357612a936140ed565b6020020151858260ff1660088110612aad57612aad6140ed565b60200201511415612ade57612ac3816001613f0b565b612acd9084613f0b565b612ad79083613f0b565b9150600092505b80612ae88161405b565b915050612a38565b50848160ff1610612b1e57838360ff1660088110612b1057612b106140ed565b602002015195508060ff1694505b50508080612b2b9061405b565b915050612a27565b505060008281526020819052604090205473ffffffffffffffffffffffffffffffffffffffff169391925090565b60015474010000000000000000000000000000000000000000900464ffffffffff1615612bea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f414c52454144595f494e495449414c49534544000000000000000000000000006044820152606401610589565b60028360ff161015612c58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f434f4d4d49545f504552494f445f544f4f5f53484f52540000000000000000006044820152606401610589565b60088360ff161015612c73578260ff168260ff161015612c7c565b60088260ff1610155b612ce2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f52455645414c5f504552494f445f544f4f5f53484f52540000000000000000006044820152606401610589565b60188260ff161115612d50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f52455645414c5f504552494f445f544f4f5f4c4f4e47000000000000000000006044820152606401610589565b60088360ff161015612d6b578260ff168160ff161015612d74565b60088160ff1610155b612dda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f57494e4e45525f504552494f445f544f4f5f53484f52540000000000000000006044820152606401610589565b60188160ff161115612e48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f57494e4e45525f504552494f445f544f4f5f4c4f4e47000000000000000000006044820152606401610589565b6001805473ffffffffffffffffffffffffffffffffffffffff87167fffffff00ffffffffffffffff000000000000000000000000000000000000000090911681177c0100000000000000000000000000000000000000000000000000000000871515908102919091177fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000004264ffffffffff16027fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff161779010000000000000000000000000000000000000000000000000060ff888116918202929092177fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff167a0100000000000000000000000000000000000000000000000000008884169081027fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffff16919091177b01000000000000000000000000000000000000000000000000000000938816938402179095556040805193845260208401919091528201939093526060810192909252907f89cc24effe0068a54496332a43194981e7c87f57abf57a356dee3b2ca6e1323e9060800160405180910390a25050505050565b600080600061302f8686866133a5565b91509150600e811161304357506003613069565b806013141561305457506001613069565b806014141561306557506000613069565b5060025b846130825761307982607d613f81565b925050506130f9565b60068510156130c25781613097600187613f81565b6130a290600f613f44565b6130ad906012613ef3565b6130b79190613ef3565b61307990607d613f81565b84600614156130e257806130d7836004613f44565b6130ad90605d613ef3565b806130ee836004613f44565b6130ad906069613ef3565b9392505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5460009073ffffffffffffffffffffffffffffffffffffffff81166131435750305b600061314e826136af565b6040805173ffffffffffffffffffffffffffffffffffffffff8316815286151560208201529192507f9b0fb4b172c9d2129423683d9cb666d68056e716090ab70de709fe4e07014dd1910160405180910390a183156132f6576040517f506c0e8600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152891515602483015260ff808a16604484015280891660648401528716608483015282169063506c0e869060a401600060405180830381600087803b15801561323157600080fd5b505af1158015613245573d6000803e3d6000fd5b50506040517f40b197f300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600160248301527f00000000000000000000000000000000000000000000000000000000000000001692506340b197f39150604401600060405180830381600087803b1580156132d957600080fd5b505af11580156132ed573d6000803e3d6000fd5b50505050613399565b6040517f8e76c69200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152891515602483015260ff808a166044840152808916606484015287166084830152821690638e76c6929060a401600060405180830381600087803b15801561338057600080fd5b505af1158015613394573d6000803e3d6000fd5b505050505b98975050505050505050565b60408051808201909152600681527f574541504f4e0000000000000000000000000000000000000000000000000000602082015260009081906012600186141561342657505060408051808201909152600581527f43484553540000000000000000000000000000000000000000000000000000006020820152600f6135c6565b856002141561346c57505060408051808201909152600481527f48454144000000000000000000000000000000000000000000000000000000006020820152600f6135c6565b85600314156134b257505060408051808201909152600581527f57414953540000000000000000000000000000000000000000000000000000006020820152600f6135c6565b85600414156134f857505060408051808201909152600481527f464f4f54000000000000000000000000000000000000000000000000000000006020820152600f6135c6565b856005141561353e57505060408051808201909152600481527f48414e44000000000000000000000000000000000000000000000000000000006020820152600f6135c6565b856006141561358457505060408051808201909152600481527f4e45434b00000000000000000000000000000000000000000000000000000000602082015260036135c6565b85600714156135c657505060408051808201909152600481527f52494e4700000000000000000000000000000000000000000000000000000000602082015260055b60008515806135d65750611f4188105b156136145761360d836135e88a613791565b6040516020016135f9929190613ddf565b6040516020818303038152906040526138cb565b905061368b565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608a901b166020820152613688908490603401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526135f99291602001613ddf565b90505b613695828261407b565b94506136a260158261407b565b9350505050935093915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff811661378c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401610589565b919050565b6060816137d157505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156137fb57806137e581614022565b91506137f49050600a83613f30565b91506137d5565b60008167ffffffffffffffff8111156138165761381661411c565b6040519080825280601f01601f191660200182016040528015613840576020820181803683370190505b5090505b84156138c357613855600183613f81565b9150613862600a8661407b565b61386d906030613ef3565b60f81b818381518110613882576138826140ed565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506138bc600a86613f30565b9450613844565b949350505050565b6000816040516020016138de9190613dc3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012092915050565b6040518060600160405280600081526020016060815260200161393b613940565b905290565b6040518061010001604052806008906020820280368337509192915050565b803561378c81614170565b803560ff8116811461378c57600080fd5b60008060006060848603121561399057600080fd5b833561399b8161414b565b95602085013595506040909401359392505050565b6000602082840312156139c257600080fd5b81516130f981614170565b6000602082840312156139df57600080fd5b81356130f98161414b565b600080600080600060a08688031215613a0257600080fd5b8535613a0d8161414b565b94506020860135613a1d81614170565b9350613a2b6040870161396a565b9250613a396060870161396a565b9150613a476080870161396a565b90509295509295909350565b600060208284031215613a6557600080fd5b815167ffffffffffffffff80821115613a7d57600080fd5b818401915084601f830112613a9157600080fd5b815181811115613aa357613aa361411c565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715613ae957613ae961411c565b81604052828152876020848701011115613b0257600080fd5b613b13836020830160208801613fbb565b979650505050505050565b600060208284031215613b3057600080fd5b5035919050565b600060208284031215613b4957600080fd5b5051919050565b60008060006101408486031215613b6657600080fd5b83359250610120840185811115613b7c57600080fd5b60208501925080359150509250925092565b60008060006101408486031215613ba457600080fd5b83359250602085603f860112613bb957600080fd5b604051610100810181811067ffffffffffffffff82111715613bdd57613bdd61411c565b60405280868301610120880189811115613bf657600080fd5b60005b6008811015613c1d57613c0b8361396a565b84529285019291850191600101613bf9565b50839650613c2a8161395f565b955050505050509250925092565b60008060408385031215613c4b57600080fd5b50508035926020909101359150565b600080600060608486031215613c6f57600080fd5b505081359360208301359350604090920135919050565b600060208284031215613c9857600080fd5b6130f98261396a565b60008060408385031215613cb457600080fd5b613cbd8361396a565b9150613ccb6020840161396a565b90509250929050565b8060005b6008811015613cfa57815160ff16845260209384019390910190600101613cd8565b50505050565b6000610140825184526020830151816020860152805180838701526101609250613d308184880160208501613fbb565b60408501519150613d446040870183613cd4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01694909401019392505050565b838152600060208481840152604083018460005b6008811015613db05760ff613d9d8361396a565b1683529183019190830190600101613d89565b5050505061014082019050949350505050565b60008251613dd5818460208701613fbb565b9190910192915050565b60008351613df1818460208801613fbb565b835190830190613e05818360208801613fbb565b01949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613e81577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452613e6f858351613d00565b94509285019290850190600101613e35565b5092979650505050505050565b6101008101818360005b6008811015613ec25760ff613eac8361396a565b1683526020928301929190910190600101613e98565b50505092915050565b6101008101613eda8284613cd4565b92915050565b6020815260006130f96020830184613d00565b60008219821115613f0657613f0661408f565b500190565b600060ff821660ff84168060ff03821115613f2857613f2861408f565b019392505050565b600082613f3f57613f3f6140be565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f7c57613f7c61408f565b500290565b600082821015613f9357613f9361408f565b500390565b600060ff821660ff841680821015613fb257613fb261408f565b90039392505050565b60005b83811015613fd6578181015183820152602001613fbe565b83811115613cfa5750506000910152565b600060ff821680613ffa57613ffa61408f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156140545761405461408f565b5060010190565b600060ff821660ff8114156140725761407261408f565b60010192915050565b60008261408a5761408a6140be565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461416d57600080fd5b50565b801515811461416d57600080fdfea2646970667358221220815bc031d0febd1696ee5c2e3e8a5b3f4ce988d4de9984b3e6b3c2ef6868516664736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTokenDataOfOwner(address,uint256,uint256)": {
        "notice": "get all info in the minimum calls"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 432,
        "contract": "src/YooLoot.sol:YooLoot",
        "label": "deposits",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 435,
        "contract": "src/YooLoot.sol:YooLoot",
        "label": "parameters",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Parameters)419_storage"
      },
      {
        "astId": 439,
        "contract": "src/YooLoot.sol:YooLoot",
        "label": "deckHashes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 445,
        "contract": "src/YooLoot.sol:YooLoot",
        "label": "rounds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_mapping(t_uint8,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ILoot)2670": {
        "encoding": "inplace",
        "label": "contract ILoot",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint8,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Parameters)419_storage": {
        "encoding": "inplace",
        "label": "struct YooLoot.Parameters",
        "members": [
          {
            "astId": 408,
            "contract": "src/YooLoot.sol:YooLoot",
            "label": "loot",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ILoot)2670"
          },
          {
            "astId": 410,
            "contract": "src/YooLoot.sol:YooLoot",
            "label": "startTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 412,
            "contract": "src/YooLoot.sol:YooLoot",
            "label": "commit3HPeriod",
            "offset": 25,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 414,
            "contract": "src/YooLoot.sol:YooLoot",
            "label": "reveal3HPeriod",
            "offset": 26,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 416,
            "contract": "src/YooLoot.sol:YooLoot",
            "label": "winner3HPeriod",
            "offset": 27,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 418,
            "contract": "src/YooLoot.sol:YooLoot",
            "label": "winnerGetLoot",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}